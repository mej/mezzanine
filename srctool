#!/usr/bin/perl -w
#
# srctool -- Tool for generating disk images, CD's, etc.
# 
# Copyright (C) 2001, Michael Jennings
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to
# deal in the Software without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
# sell copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies of the Software, its documentation and marketing & publicity
# materials, and acknowledgment shall be given in the documentation, materials
# and software packages that this Software was used.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
# IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
# $Id: srctool,v 1.8 2001/03/27 05:44:39 mej Exp $
#

# Include the Perl Modules we need
require POSIX;
require Getopt::Long;
use Avalon::Util;

# Constants
#
$WORK_DIR = "work";
$TMP_DIR = "/var/tmp/srctool.$$";

# Print usage information
sub
print_usage_info
{
    print "\n";
    $leader = "$progname $version Usage Information";
    $underbar = $leader;
    $underbar =~ s/./-/g;
    print "$leader\n$underbar\n";
    print "\n";
    print "  Syntax:   srctool [ options ]\n";
    print "\n";
    print "    -h --help                        Show this usage information\n";
    print "    -d --debug                       Turn on debugging\n";
    print "    -v --version                     Show version and copyright\n";
    print "    -i --import                      Import a new package/source tree\n";
    print "    -p --prepare                     Prepare a working tree\n";
    print "    -M --merge                       Merge one or more raw files into an SPM\n";
    print "    -n --name <pkg>-<version>        Specify the package name and version for an import\n";
    print "\n";
    exit(AVALON_SUCCESS);
}

# Return the files in a particular directory
sub
find_files
{
    my $dir = $_[0];
    my @files;

    @files = &grepdir(sub {-f "$dir/$_" && $_ !~ /^\./}, $dir);
    foreach my $f (0..$#files) {
	$files[$f] = "$dir/$files[$f]";
    }
    return @files;
}

# Return the subdirectories in a particular directory
sub
find_subdirs
{
    my $dir = $_[0];
    my @subdirs;

    @subdirs = &grepdir(sub {-d "$dir/$_" && $_ !~ /^\./}, $dir);
    foreach my $f (0..$#subdirs) {
	$subdirs[$f] = "$dir/$subdirs[$f]";
    }
    return @subdirs;
}

# Create temporary working space in /var/tmp
sub
create_temp_space
{
    my ($pkg, $type) = @_;
    my ($dir, $d);
    my @dirlist;

    $dir = "$TMP_DIR/$pkg";
    &nuke_tree($dir);
    &mkdirhier($dir) || return "";
    if ($type eq "SPM") {
	@dirlist = ("S", "P", "F");
    } elsif ($type eq "build") {
	@dirlist = ("BUILD", "SOURCES", "SRPMS", "RPMS", "SPECS");
    }
    foreach $d (@dirlist) {
	if (!&mkdirhier("$dir/$d")) {
	    eprint "Creation of $dir/$d failed -- $!\n";
	    return "";
	}
    }
    return $dir;
}

# Clean up temp space
sub
clean_temp_space
{
    return &nuke_tree($TMP_DIR);
}

# Generic wrapper to grab command output
sub
run_cmd
{
    my ($prog, $params, $show_output) = @_;
    my ($err, $msg, $line, $cmd) = undef;
    my @output;
    local *CMD;

    $cmd = "$prog $params";

    dprint "About to run $cmd\n";
    if (!open(CMD, "$cmd 2>&1 |")) {
        return (-1, "Execution of \"$cmd\" failed -- $!");
    }
    while (<CMD>) {
        chomp($line = $_);
        push @output, $line;
        if ($show_output) {
            print "$show_output$line\n";
        } else {
            dprint "From $prog -> $line\n";
        }
    }
    close(CMD);
    $err = $? >> 8;
    dprint "\"$cmd\" returned $err\n";
    return ($err, @output);
}

# Wrapper for Avalon commands specifically
sub
run_av_cmd
{
    my ($prog, $params, $show_output) = @_;
    my ($err, $msg, $line, $cmd) = undef;
    my (@output, @tmp);

    $params = "--debug $params" if ($debug);
    @output = &run_cmd($prog, $params, $show_output);
    $err = shift @output;
    if ($err) {
        my @tmp;

        @tmp = grep(/^\w+:\s*error:\s*(\S.*)$/i, @output);
        if (scalar(@tmp)) {
            $msg = $tmp[$#tmp];
        }
    }
    return ($err, ($show_output ? $msg : @output));
}

# Import a package
sub
import_package
{
    my ($pkgfile, $name) = @_;
    my ($err, $msg, $cmd, $pwd, $tmpdir, $rpmcmd, $pkg, $ver, $rel, $spec, $tag);
    my (@contents, @srcs, @patches, @tmp);

    chomp($pwd = `/bin/pwd`);

    if ($pkgfile && -f $pkgfile) {
        # If it's a file, make sure it's an SRPM
        if ($pkgfile =~ /^(?:.*\/)?([^\/]+)-([^-]+)-([^-]+)\.(no)?src\.rpm$/) {
            ($pkg, $ver, $rel) = ($1, $2, $3);
        } else {
            eprint "Invalid package for import:  $pkgfile\n";
            return AVALON_INVALID_PACKAGE;
        }
        print "Importing $pkgfile into $pkg tree....\n\n";
        # Create a working tree to be imported
        $tmpdir = &create_temp_space($pkg, "SPM");
	if (! $tmpdir) {
	    return AVALON_SYSTEM_ERROR;
	}
        $rpmcmd = "rpm --define \"_sourcedir $tmpdir/S\" --define \"_specdir $tmpdir/F\"";
        # Install the SRPM into the temporary directory
        @tmp = &run_av_cmd("pkgtool", "-P '$rpmcmd' -ip $pkgfile", 0);
        if (($err = shift @tmp) != 0) {
            eprint "Unable to install $pkgfile\n";
            return AVALON_COMMAND_FAILED;
        }
        # The spec file should be the only file in $tmpdir/F
        @tmp = &find_files("$tmpdir/F");
        if (scalar(@tmp) != 1) {
            my $n = scalar(@tmp);
            &fatal_error("$n spec files?!\n");
        }
        $spec = $tmp[0];
        # Get a list of all source and patch files
        if (!&parse_spec_file($spec)) {
            eprint "Unable to parse spec file.\n";
            return AVALON_COMMAND_FAILED;
        }
        @srcs = values %{$specdata->{SOURCE}};
        @patches = values %{$specdata->{PATCH}};
        # Move the patches to $tmpdir/P/
        if (&move_files(@patches, "$tmpdir/P/") < scalar(@patches)) {
            eprint "One or more patches could not be moved into place.\n";
            return AVALON_FILE_OP_FAILED;
        }
        chdir($tmpdir);
        $tag = "$pkg-$ver-$rel";
        $tag =~ tr/a-z/A-Z/;
        $tag =~ s/\./_/g;
        ($err, $msg) = &run_av_cmd("revtool", "-xit $tag", "  ");
        if ($err) {
            eprint "Import of $pkgfile failed -- $msg\n";
            return $err;
        }
        chdir($pwd);
	&clean_temp_space();
    } elsif (! $pkgfile || -d $pkgfile) {
	if (! $name || $name !~ /-/) {
	    if (-t STDIN) {
		my ($pname, $pver);

		print "Missing -n option.  Please supply the following information:\n";
		print "Package name:  ";
		$pname = <STDIN>;
		while (! $pver) {
		    print "Package version:  ";
		    $pver = <STDIN>;
		    if ($pver =~ /-/) {
			eprint "Package versions cannot contain hyphens.  Please try again.\n";
			undef $pver;
		    }
		}
		$name = "$pname-$pver";
		print "For future reference, you can specify this information on the command line like this:  -n $name\n";
	    } else {
		eprint "No package name/version supplied for FST import\n";
		return AVALON_MISSING_INFO;
	    }
	}
	chdir($pkgfile) if ($pkgfile);
        ($tag = $name) =~ tr/a-z/A-Z/;
        $tag =~ s/\./_/g;
        ($err, $msg) = &run_av_cmd("revtool", "-xit $tag", "  ");
        if ($err) {
            eprint "Import of $pkgfile failed -- $msg\n";
            return $err;
        }
        chdir($pwd);
    }
    return AVALON_SUCCESS;
}

sub
prepare_tree
{
    my $pkg = $_[0];
    my ($pwd, $pkgdir, $cmd, $err, $msg, $spec, $tmpdir, $rpmcmd, $tmp);
    my (@srcs, @patches, @tmp);

    chomp($pwd = `/bin/pwd`);

    # cd into the package directory if one was specified.  If not, use the current directory.
    if ($pkg) {
	if (!chdir($pkg)) {
	    eprint "Unable to cd to $pkg -- $!\n";
	    return AVALON_INVALID_PACKAGE;
	}
	chomp($pkgdir = `/bin/pwd`);
    } else {
	($pkg = $pwd) =~ s/^.*\/([^\/]+)$/$1/;
	$pkgdir = $pwd;
    }
    # Create the working directory
    &nuke_tree($WORK_DIR);
    if (!mkdir($WORK_DIR)) {
        eprint "Unable to create working directory -- $!\n";
        return AVALON_SYSTEM_ERROR;
    }
    # Find all the sources and patches and the spec file.
    @srcs = &find_files("S");
    @patches = &find_files("P");
    @tmp = &find_files("F");
    if (scalar(@tmp) != 1) {
	my $n = scalar(@tmp);
	&fatal_error("$n spec files?!\n");
    }
    $spec = $tmp[0];
    # Create the RPM build tree
    $tmpdir = &create_temp_space($pkg, "build");
    if (! $tmpdir) {
	return AVALON_SYSTEM_ERROR;
    }
    # Copy all the files into their proper places for RPM's use
    foreach my $f (@srcs, @patches) {
        my $fname;

        ($fname = $f) =~ s/^.\///;
	if (!link($f, "$tmpdir/SOURCES/$fname")) {
	    eprint "Unable to copy $f into $tmpdir/SOURCES -- $!\n";
	    return AVALON_SYSTEM_ERROR;
	}
    }
    ($tmp = $spec) =~ s/^.\///;
    if (!link($spec, "$tmpdir/SPECS/$tmp")) {
	eprint "Unable to copy $spec into $tmpdir/SPECS -- $!\n";
	return AVALON_SYSTEM_ERROR;
    }
    print "Creating working directory $pkgdir/$WORK_DIR....\n";
    $rpmcmd = "--define \"_topdir $tmpdir\" --define \"_builddir $pkgdir/$WORK_DIR\" -bp $spec";
    @tmp = &run_cmd("rpm", $rpmcmd, 0);
    if (($err = shift @tmp) != 0) {
        eprint "Creation of working directory failed -- $tmp[$#tmp]\n";
    }
    return $err;
}

# main() here is basically the same as main() in C
sub
main
{
    # Set up the basic variables
    $progname = "srctool";
    $version = "1.0";
    &print_usage_info() if (!scalar(@ARGV));

    # See the Getopt::Long man page for details on the syntax of this line
    @valid_opts = ("h|help", "v|version", "d|debug", "i|import", "p|prepare", "m|mod|modify",
                   "M|merge", "r|resync", "a|apply:s", "n|name=s");
    Getopt::Long::Configure("no_getopt_compat", "bundling", "no_ignore_case");
    Getopt::Long::GetOptions(@valid_opts);

    # Post-parse the options stuff
    select STDOUT; $| = 1;
    if ($opt_v) {
        # Do not edit this variable.  It is updated automatically by CVS when you commit
        my $rcs_info = 'CVS Revision $Revision: 1.8 $ created on $Date: 2001/03/27 05:44:39 $ by $Author: mej $ ';

        $rcs_info =~ s/\$\s*Revision: (\S+) \$/$1/;
        $rcs_info =~ s/\$\s*Date: (\S+) (\S+) \$/$1 at $2/;
        $rcs_info =~ s/\$\s*Author: (\S+) \$ /$1/;
        print "\n";
	print "$progname $version by Michael Jennings <mej\@eterm.org>\n";
        print "Copyright (c) 2001, Michael Jennings and VA Linux Systems, Inc.\n";
        print "  ($rcs_info)\n";
        print "\n";
	return AVALON_SUCCESS;
    } elsif ($opt_h) {
	&print_usage_info();   # Never returns
        # This is a really silly way to shut up the "used only once" warnings.
        $opt_h = $opt_v = $opt_a = $opt_i = $opt_m = $opt_p = $opt_r = $opt_M = 0;
    }

    $debug = ($opt_d ? $opt_d : 0);
    $pkgname = ($opt_n ? $opt_n : "");
    if (scalar(@ARGV)) {
	@flist = @ARGV;
    }

    # Signal handling
    $SIG{HUP} = 'IGNORE';
    $SIG{INT} = \&handle_signal;
    $SIG{TERM} = \&handle_signal;
    $SIG{QUIT} = \&handle_fatal_signal;
    $SIG{ILL} = \&handle_fatal_signal;
    $SIG{ABRT} = \&handle_fatal_signal;
    $SIG{FPE} = \&handle_fatal_signal;
    $SIG{SEGV} = \&handle_fatal_signal;
    $SIG{BUS} = \&handle_fatal_signal;
    $SIG{TSTP} = \&handle_fatal_signal;
    $SIG{TTIN} = \&handle_fatal_signal;
    $SIG{TTOU} = \&handle_fatal_signal;
    $SIG{__WARN__} = \&handle_warning;

    if ($0 =~ /avimport$/ || $opt_i) {
	if (scalar(@flist)) {
	    foreach $f (@flist) {
		my $err;

		$err = &import_package($f, $pkgname);
		return $err if ($err);
	    }
	} else {
	    return &import_package("", $pkgname);
	}
    } elsif ($0 =~ /avprep$/ || $opt_p) {
	if (scalar(@flist)) {
	    foreach $f (@flist) {
		my $err;

		$err = &prepare_tree($f);
		return $err if ($err);
	    }
	} else {
	    return &prepare_tree("");
	}
    } elsif ($0 =~ /avmerge$/ || $opt_M) {
        my $pkg;

        foreach my $f (@flist) {
            if (-d $f) {
                $pkg = $f;
                last;
            }
        }
        if (! $pkg) {
            if (-d "S") {
                $pkg = &basename(&getcwd());
            } else {
                eprint "No valid module specified.\n";
                return AVALON_BAD_MODULE;
            }
        }
        foreach my $f (grep($_ ne $pkg, @flist)) {

        }
    } elsif ($0 =~ /avmod$/ || $opt_m) {
    } elsif ($0 =~ /avpatch$/ || $opt_a) {
    } elsif ($opt_r) {
    } else {
    }
    return AVALON_SUCCESS;
}

exit &main();
