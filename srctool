#!/usr/bin/perl -w
#
# srctool -- Tool for managing source packages and modules
# 
# Copyright (C) 2001, Michael Jennings
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to
# deal in the Software without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
# sell copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies of the Software, its documentation and marketing & publicity
# materials, and acknowledgment shall be given in the documentation, materials
# and software packages that this Software was used.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
# IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
# $Id: srctool,v 1.26 2001/08/20 17:34:45 mej Exp $
#

# Include the Perl Modules we need
require POSIX;
require Getopt::Long;
use Cwd ('&getcwd', '&abs_path');
use File::Copy ('&cp', '&mv');

# Avalon modules
use Avalon::Util;
use Avalon::RevCtl;
use Avalon::PkgVars;
use Avalon::RPM;
use Avalon::Src;
use Avalon::Pkg;

# Print usage information
sub
print_usage_info
{
    print "\n";
    $leader = "$progname $version Usage Information";
    $underbar = $leader;
    $underbar =~ s/./-/g;
    print "$leader\n$underbar\n";
    print "\n";
    print "  Syntax:   srctool [ options ] [ <pkg> ]\n";
    print "\n";
    print "    -h --help                        Show this usage information\n";
    print "    -d --debug                       Turn on debugging\n";
    print "    -v --version                     Show version and copyright\n";
    print "    -i --import                      Import a new package/source tree\n";
    print "    -p --prepare                     Prepare a working tree\n";
    print "    -M --merge                       Merge one or more raw files into an SPM\n";
    print "    -a --apply --patch               Apply changes in the working tree as a patch to the SPM\n";
    print "    -c --clean                       Clean up a package tree\n";
    print "    -n --name <name>                 Specify the name of a package (-i) or patch (-a)\n";
    print "    -D --dir <repository>            Specify the repository to use\n";
    print "    -T --test                        Test only; do not talk to the master server\n";
    print "\n";
    exit(AVALON_SUCCESS);
}

# Import a package
sub
import_package
{
    my ($pkgfile, $name, $err, $msg, $cmd, $pwd, $tmpdir, $rpmcmd, $pkg, $ver, $rel, $spec, $tag, $specdata);
    my (@contents, @srcs, @patches, @tmp);

    $pwd = &getcwd();
    $pkgfile = &pkgvar_filename();
    $name = &pkgvar_name();

    if ($pkgfile && -f $pkgfile) {
        # If it's a file, make sure it's an SRPM
        if (&basename($pkgfile) =~ /^([^\/]+)-([^-]+)-([^-]+)\.(no)?src\.rpm$/) {
            ($pkg, $ver, $rel) = ($1, $2, $3);
        } else {
            eprint "Invalid package for import:  $pkgfile\n";
            return AVALON_INVALID_PACKAGE;
        }
        print "Importing $pkgfile into $pkg tree....\n\n";
        # Create a working tree to be imported
        $tmpdir = &create_temp_space($pkg, "SPM");
	if (! $tmpdir) {
	    return AVALON_SYSTEM_ERROR;
	}

        # Install the SRPM into the temporary directory
        &pkgvar_parameters("--define \"_sourcedir $tmpdir/S\" --define \"_specdir $tmpdir/F\"");
        ($err, $msg) = &package_install();
        &pkgvar_parameters("");
        if ($err != AVALON_SUCCESS) {
            eprint "Unable to install $pkgfile\n";
            return AVALON_COMMAND_FAILED;
        }

        # The spec file should be the only file in $tmpdir/F
        @tmp = &find_files("$tmpdir/F");
        if (scalar(@tmp) != 1) {
            my $n = scalar(@tmp);
            &fatal_error("$n spec files in $tmpdir/F?!\n");
        }
        $spec = $tmp[0];

        # Get a list of all source and patch files
        &pkgvar_instructions($spec);
        $specdata = &parse_spec_file();
        if (!defined($specdata->{SPECFILE})) {
            eprint "Unable to parse spec file.\n";
            return AVALON_COMMAND_FAILED;
        }
        @srcs = values %{$specdata->{SOURCE}};
        @patches = values %{$specdata->{PATCH}};
        dprint "Specfile $spec, sources ", join(' ', @srcs), ", patches ", join(' ', @patches), "\n";

        # Move the patches to $tmpdir/P/
        if (scalar(@patches)) {
            chdir("$tmpdir/S");
            dprint "Moving patches to $tmpdir/P/\n";
            if (&move_files(@patches, "$tmpdir/P/") < scalar(@patches)) {
                eprint "One or more patches could not be moved into place.\n";
                return AVALON_FILE_OP_FAILED;
            }
        }

        $tag = "$pkg-$ver-$rel";
        if ($test_only) {
            chdir($pwd);
            if (! &mv($tmpdir, "$pwd/$pkg")) {
                eprint "Unable to move $tmpdir to $tmpdir -- $!\n";
                return AVALON_FILE_OP_FAILED;
            }
            print "You specified the \"test\" (-T) option.  You will need to import the new tree by hand (avimport $pkg).\n";
        } else {
            chdir($tmpdir);
            $tag =~ tr/a-z/A-Z/;
            $tag =~ s/\./_/g;
            &revctl_rtag($tag);
            &revctl_exclusive(1);
            $err = &import_vendor_sources();
            if ($err != AVALON_SUCCESS) {
                eprint "Import of $pkgfile failed.\n";
                return $err;
            }
            chdir($pwd);
        }
	&clean_temp_space();
    } elsif (! $pkgfile || -d $pkgfile) {
	if (! $name || $name !~ /-/) {
	    if (-t STDIN) {
		my ($pname, $pver);

		print "Missing -n option.  Please supply the following information:\n";
		print "Package name:  ";
		chomp($pname = <STDIN>);
		while (! $pver) {
		    print "Package version:  ";
		    chomp($pver = <STDIN>);
		    if ($pver =~ /-/) {
			eprint "Package versions cannot contain hyphens.  Please try again.\n";
			undef $pver;
		    }
		}
		$name = "$pname-$pver";
		print "For future reference, you can specify this information on the command line like this:  -n $name\n";
	    } else {
		eprint "No package name/version supplied for FST import\n";
		return AVALON_MISSING_INFO;
	    }
	}

        if ($test_only) {
            print "You specified the \"test\" (-T) option.  You will need to import the new tree by hand (avimport -n $name).\n";
        } else {
            chdir($pkgfile) if ($pkgfile);
            if (($err = &generate_symlink_file("")) != AVALON_SUCCESS) {
                return $err;
            }
            ($tag = $name) =~ tr/a-z/A-Z/;
            $tag =~ s/\./_/g;
            &revctl_rtag($tag);
            &revctl_exclusive(1);
            $err = &import_vendor_sources();
            if ($err != AVALON_SUCCESS) {
                eprint "Import of $pkgfile failed.\n";
                return $err;
            }
        }
        chdir($pwd);
    }
    return AVALON_SUCCESS;
}

sub
prepare_tree($$)
{
    my ($pkg, $pwd, $pkgdir, $cmd, $err, $msg, $spec, $tmpdir, $rpmcmd, $tmp);
    my (@srcs, @patches, @tmp);

    # cd into the package directory if one was specified.  If not, use the current directory.
    $pwd = &getcwd();
    if (&pkgvar_filename()) {
        $pkg = &pkgvar_filename();
        $pkgdir = &abs_path($pkg);
    } else {
        $pkgdir = $pwd;
        $pkg = &pkgvar_filename(&basename($pkgdir));
    }
    if (!chdir($pkgdir)) {
        eprint "Unable to cd to $pkgdir -- $!\n";
        return AVALON_INVALID_PACKAGE;
    }

    # Create the working directory
    &nuke_tree($WORK_DIR);
    if (!&mkdirhier($WORK_DIR)) {
        eprint "Unable to create working directory -- $!\n";
        return AVALON_SYSTEM_ERROR;
    }
    # Create the RPM build tree
    $tmpdir = &create_temp_space($pkg, "build");
    if (! $tmpdir) {
	return AVALON_SYSTEM_ERROR;
    }
    # Copy all the files into their proper places for RPM's use
    $spec = &install_spm_files($tmpdir);
    if (! $spec) {
	return AVALON_SYSTEM_ERROR;
    }
    print "Creating working directory $pkgdir/$WORK_DIR....\n";
    $rpmcmd = "--define \"_topdir $tmpdir\" --define \"_builddir $pkgdir/$WORK_DIR\" --nodeps -bp $spec";
    @tmp = &run_cmd("rpm", $rpmcmd, 0);
    if (($err = shift @tmp) != AVALON_SUCCESS) {
        dprint join("\n  ", @tmp), "\n";
        eprint "Creation of working directory failed -- $tmp[$#tmp]\n";
    } elsif ($external) {
        print "You may now chdir to ", ($pkgdir eq $pwd ? $WORK_DIR : "$pkg/$WORK_DIR"), " to make changes.\n";
        print "Use \"avpatch -n <patch_name>\" to generate a patch when done.\n";
    }

    chdir($pwd);
    return $err;
}

sub
gen_patch($$)
{
    my ($pkg, $patch, $old_wd, $new_wd, $err, $line_cnt, $pwd);
    my @output;
    local *PATCH;

    $pkg = &pkgvar_filename();
    $patch = &pkgvar_name();
    if ($pkg) {
        $pwd = &getcwd();
        if (!chdir($pkg)) {
            eprint "Unable to chdir to $pkg -- $!\n";
            return AVALON_SYSTEM_ERROR;
        }
    }

    $old_wd = $WORK_DIR;
    $new_wd = $old_wd . "+patched";

    # First, rename the old working directory
    if (-d $new_wd) {
        # Looks like it's already been renamed.
        wprint "Patched working tree $new_wd exists.  I'll assume it's the right one.\n";
        if (-d $old_wd) {
            &nuke_tree($old_wd);
        }
    } elsif (! &mv($old_wd, $new_wd)) {
        eprint "Unable to move $old_wd to $new_wd -- $!\n";
        return AVALON_SYSTEM_ERROR;
    }
    # Then create a new one using the routine above
    &pkgvar_filename("");
    if (($err = &prepare_tree()) != AVALON_SUCCESS) {
        return $err;
    }

    # Now diff the two trees and save the output
    @output = &run_cmd("diff", "-Nur -x '*.orig' -x '*.rej' $old_wd $new_wd", 0);
    if (($err = shift @output) == 2) {
        foreach my $msg (grep(/^diff: /, @output)) {
            eprint "$msg\n";
        }
    }

    # If the patch directory doesn't exist, create it.
    if (! -d "P") {
        my @tmp;

        if (! &mkdirhier("P")) {
            return AVALON_SYSTEM_ERROR;
        }
        if ($test_only) {
            print "You specified the \"test\" (-T) option.  You will need to add the patch directory by hand (avadd P).\n";
        } else {
            $err = &add_new_files("P");
            if ($err != AVALON_SUCCESS && $err != AVALON_DUPLICATE) {
                eprint "Addition of directory P failed.\n";
                return $err;
            }
        }
    }

    # Finally, process the output to save the patch
    if (!open(PATCH, ">P/$patch")) {
        eprint "Unable to open P/$patch for writing -- $!\n";
        return AVALON_SYSTEM_ERROR;
    }
    foreach my $line (@output) {
        next if ($line =~ /^diff: /);
        if ($line =~ /^(diff|---|\+\+\+|\*\*\*)/) {
            $line =~ s/$old_wd\///;
            $line =~ s/\Q$new_wd\E\//avalon_patched_/;
        }
        if ($line =~ /^[-I=Rrd\+\s@\*\\]/ || $line =~ /^$/) {
            print PATCH "$line\n";
            $line_cnt++;
        } else {
            dprint "Extra line in diff:  $line";
        }
    }
    close(PATCH);
    print "Created P/$patch ($line_cnt lines).\n";

    # Add the new patch file
    if ($test_only) {
        print "You specified the \"test\" (-T) option.  You will need to add the new patch by hand (avadd P/$patch).\n";
    } else {
        $err = &add_new_files("P/$patch");
        if ($err != AVALON_SUCCESS && $err != AVALON_DUPLICATE) {
            eprint "Addition of directory P/$patch failed.\n";
            return $err;
        }
        print "Patch added and ready for commit.\n";
    }

    # Cleanup
    &nuke_tree($old_wd);
    mv($new_wd, $old_wd);
    chdir($pwd) if ($pwd);

    return AVALON_SUCCESS;
}

sub
merge_file($$)
{
    my ($new_file) = shift;
    my ($pkg, $type, $dest, $pwd, $err);

    if ($new_file =~ /^([SPRF]):(.*)$/) {
        ($type, $new_file) = ($1, $2);
    } elsif ($new_file =~ /^(.*):([SPRF])$/) {
        ($type, $new_file) = ($2, $1);
    } elsif ($new_file =~ /\.(patch|diff)(\.gz|\.bz2|\.Z)?$/) {
        $type = 'P';
    } elsif ($new_file =~ /\.(cpio|tar|cgz|tgz)(\.gz|\.bz2|\.Z)?$/) {
        $type = 'S';
    } elsif ($new_file =~ /\.spec(\.in)?$/) {
        $type = 'F';
    } elsif ($new_file =~ /\.(no)?src\.rpm$/) {
        $type = 'R';
    } elsif ($new_file =~ /^\.avalon/) {
        $type = 'E';
    } else {
        if (-t STDIN) {
            print "Please specify whether $new_file is a Source file, Patch, spec File, or an Extra file ";
            for (; $type !~ /^[SPFE]$/; ) {
                print "[S/P/F/E]:  ";
                chomp($type = <STDIN>);
                $type =~ tr/a-z/A-Z/;
            }
        } else {
            eprint "Unable to guess the type of merge file $new_file.  You must specify it.\n";
            return AVALON_BAD_ADDITION;
        }
    }

    $pkg = &pkgvar_filename();
    if ($pkg) {
        $pwd = &getcwd();
        if (!chdir($pkg)) {
            eprint "Unable to chdir into $pkg -- $!\n";
            return AVALON_SYSTEM_ERROR;
        }
    } else {
        $pkg = &basename(&getcwd);
    }

    dprint "Merging $new_file ($type) into $pkg\n";
    if ($type eq 'R') {
        # Merge in new files from an SRPM.  TODO
    } else {
        my @output;

        # Copy the file into the appropriate directory
        if ($type eq 'E') {
            $dest = "";
        } else {
            $dest = "$type/";
            if (! -d $type && !&mkdirhier($type)) {
                eprint "Unable to create directory $type -- $!\n";
                return AVALON_SYSTEM_ERROR;
            }
        }
        $dest .= &basename($new_file);
        if (! &cp($new_file, $dest)) {
            eprint "Unable to copy $new_file to $dest -- $!\n";
            return AVALON_SYSTEM_ERROR;
        }

        # Add the file to be committed later via "srctool -m" or "avmod"
        if ($test_only) {
            print "You specified the \"test\" (-T) option.  You will need to add the new file(s) by hand (avadd $dest).\n";
        } else {
            $err = &add_new_files($dest);
            if ($err != AVALON_SUCCESS) {
                eprint "Addition of $new_file ($dest) failed.\n";
            } else {
                print "$new_file merged successfully.\n";
            }
        }
    }
    chdir($pwd) if ($pwd);
    return $err;
}

# Clean up a package tree
sub
clean_package
{
    my ($pkg, $pwd, $err);
    my @output;

    $pkg = &pkgvar_filename();
    if ($pkg) {
        $pwd = &getcwd();
        if (!chdir($pkg)) {
            eprint "Unable to chdir to $pkg -- $!\n";
            return AVALON_SYSTEM_ERROR;
        }
    } else {
        $pkg = &basename(&getcwd());
    }

    if ($test_only) {
        eprint "You specified the \"test\" (-T) option.  I will not be able to clean this module.\n";
        return AVALON_SYNTAX_ERROR;
    }

    print "Cleaning and resyncing $pkg...\n";
    @output = &run_av_cmd("revtool", &revctl_repository() . " -g", 0);
    if (($err = shift @output) != AVALON_SUCCESS) {
        print @output;
        eprint "Unable to resync with repository.\n";
        return $err;
    }
    @output = grep(/^\?/, @output);
    if (scalar(@output)) {
        foreach my $item (@output) {
            $item =~ s/^\?\s+//;
            print "Removing $item...\n";
            &nuke_tree($item);
        }
    }

    print "Cleanup of $pkg complete.\n";
    chdir($pwd) if ($pwd);
    return AVALON_SUCCESS;
}

# main() here is basically the same as main() in C
sub
main
{
    # Set up the basic variables
    $progname = "srctool";
    $version = "2.1";
    umask 022;

    # See the Getopt::Long man page for details on the syntax of this line
    @valid_opts = ("h|help", "v|version", "d|debug", "i|import", "p|prepare", "m|mod|modify",
                   "M|merge", "r|resync", "a|apply|patch:s", "n|name=s", "c|clean", "D|dir|repository=s",
                   "T|test");
    Getopt::Long::Configure("no_getopt_compat", "bundling", "no_ignore_case");
    Getopt::Long::GetOptions(@valid_opts);

    # Post-parse the options stuff
    select STDOUT; $| = 1;
    if ($opt_v) {
        # Do not edit this variable.  It is updated automatically by CVS when you commit
        my $rcs_info = 'CVS Revision $Revision: 1.26 $ created on $Date: 2001/08/20 17:34:45 $ by $Author: mej $ ';

        $rcs_info =~ s/\$\s*Revision: (\S+) \$/$1/;
        $rcs_info =~ s/\$\s*Date: (\S+) (\S+) \$/$1 at $2/;
        $rcs_info =~ s/\$\s*Author: (\S+) \$ /$1/;
        print "\n";
	print "$progname $version by Michael Jennings <mej\@eterm.org>\n";
        print "Copyright (c) 2001, Michael Jennings and VA Linux Systems, Inc.\n";
        print "  ($rcs_info)\n";
        print "\n";
	return AVALON_SUCCESS;
    } elsif ($opt_h) {
	&print_usage_info();   # Never returns
    }

    &debug_set($opt_d);
    &pkgvar_name($opt_n);
    if (scalar(@ARGV)) {
	@flist = @ARGV;
    }
    &revctl_repository($opt_D);
    &revctl_command("/bin/true") if ($opt_T);

    # Signal handling
    $SIG{HUP} = 'IGNORE';
    $SIG{INT} = \&handle_signal;
    $SIG{TERM} = \&handle_signal;
    $SIG{QUIT} = \&handle_fatal_signal;
    $SIG{ILL} = \&handle_fatal_signal;
    $SIG{ABRT} = \&handle_fatal_signal;
    $SIG{FPE} = \&handle_fatal_signal;
    $SIG{SEGV} = \&handle_fatal_signal;
    $SIG{BUS} = \&handle_fatal_signal;
    $SIG{TSTP} = \&handle_fatal_signal;
    $SIG{TTIN} = \&handle_fatal_signal;
    $SIG{TTOU} = \&handle_fatal_signal;

    if ($0 =~ /avimport$/ || $opt_i) {
	if (scalar(@flist)) {
	    foreach $f (@flist) {
		my $err;

                &pkgvar_filename($f);
		$err = &import_package();
		return $err if ($err);
	    }
	} else {
	    return &import_package();
	}
    } elsif ($0 =~ /avprep$/ || $opt_p) {
	if (scalar(@flist)) {
	    foreach $f (@flist) {
		my $err;

                &pkgvar_filename($f);
		$err = &prepare_tree();
		return $err if ($err);
	    }
	} else {
	    return &prepare_tree();
	}
    } elsif ($0 =~ /avmerge$/ || $opt_M) {
        my $pkg;

        foreach my $f (@flist) {
            if (-d $f) {
                $pkg = $f;
                last;
            }
        }
        if ($pkg) {
            @flist = grep($_ ne $pkg, @flist);
        } elsif (! -d "F") {
            eprint "No valid module specified.\n";
            return AVALON_BAD_MODULE;
        } else {
            $pkg = "";
        }
        foreach my $f (@flist) {
            my $err;

            &pkgvar_filename($pkg);
            $err = &merge_file($f);
            return $err if ($err);
        }
    } elsif ($0 =~ /avpatch$/ || $opt_a) {
        my ($pkg, $patch);

        if (scalar(@flist) == 2) {
            if (-d $flist[0]) {
                ($pkg, $patch) = @flist;
            } elsif (-d $flist[1]) {
                ($patch, $pkg) = @flist;
            }
        } elsif (scalar(@flist) == 1) {
            if (-d $flist[0]) {
                $pkg = $flist[0];
            } else {
                $patch = $flist[0];
            }
        }
        if (! $pkg) {
            if (-d 'F') {
                $pkg = "";
            } else {
                eprint "No package was specified, and the current directory doesn't look like one.\n";
                return AVALON_SYNTAX_ERROR;
            }
        }
        if (! $patch) {
            if ($opt_a && $opt_a =~ /patch$/) {
                $patch = $opt_a;
            } elsif ($pkgname) {
                $patch = $pkgname;
            } else {
                eprint "No patch name was specified.\n";
                return AVALON_SYNTAX_ERROR;
            }
        }
        &pkgvar_filename($pkg);
        &pkgvar_name($patch);
        return &gen_patch();
    } elsif ($0 =~ /avclean$/ || $opt_c) {
	if (scalar(@flist)) {
	    foreach $f (@flist) {
		my $err;

                &pkgvar_filename($f);
		$err = &clean_package();
		return $err if ($err);
	    }
	} else {
	    return &clean_package();
	}
    } elsif ($opt_r) {
    } else {
    }
    return AVALON_SUCCESS;
}

exit &main();
