#!/usr/bin/perl
#
# revtool -- Source Code Revision Control Tool
# 
# Copyright (C) 2000, Michael Jennings
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to
# deal in the Software without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
# sell copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies of the Software, its documentation and marketing & publicity
# materials, and acknowledgment shall be given in the documentation, materials
# and software packages that this Software was used.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
# IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
# $Id: revtool,v 1.21 2000/05/21 21:46:14 mej Exp $
#

# Include the Perl Modules we need
use POSIX;
use Getopt::Mixed;

# Constants
#
# 1-20 are generic errors
sub REVTOOL_NO_SERVER()           {1;}
sub REVTOOL_SERVER_CRASH()        {2;}
sub REVTOOL_BAD_LOGIN()           {3;}
sub REVTOOL_COMMAND_FAILED()      {4;}
sub REVTOOL_ACCESS_DENIED()       {5;}

# 21-40 are retrieval/update errors
sub REVTOOL_FILE_NOT_FOUND()      {21;}
sub REVTOOL_FILE_REMOVED()        {22;}
sub REVTOOL_CONFLICT_FOUND()      {23;}
sub REVTOOL_INVALID_TAG()         {24;}

# 41-60 are add/remove errors
sub REVTOOL_BAD_ADDITION()        {41;}
sub REVTOOL_BAD_REMOVAL()         {42;}

# 61-80 are commit errors
sub REVTOOL_NEED_UPDATE()         {61;}

# 127 is a catch-all
sub REVTOOL_UNSPECIFIED_ERROR()   {127;}

# Print usage information
sub
print_usage_info
{
    print "\n";
    $leader = "$progname $version Usage Information";
    $underbar = $leader;
    $underbar =~ s/./-/g;
    print "$leader\n$underbar\n";
    print "\n";
    print "  Syntax:   $progname [ options ]\n";
    print "\n";
    print "    -h --help                Show this usage information\n";
    print "    -d --debug               Turn on debugging\n";
    print "    -v --version             Show version and copyright\n";
    print "    -g --get                 Download and/or merge the current sources from the master tree\n";
    print "    -p --put                 Upload new changes to the master tree\n";
    print "    -a --add                 Mark new files for addition into the master tree\n";
    print "    -r --remove              Delete files and mark them for deletion in the master tree\n";
    print "    -R --recurse             Operate recursively (this is the default for some commands)\n";
    print "    -t --tag                 Specify a symbolic tag\n";
    print "    -i --import              Import a new set of sources, or update the vendor branch for a package\n";
    print "    -k [code]                Specify keyword handling when adding files (use -kb to add binary files)\n";
    print "    -D --dir                 Specify an alternative repository (\$CVSROOT)\n";
    print "    -x --exclusive           Only commit the specified files\n";
    print "       --addlist \"files\"   Specify which files to add so that adds and removes can coincide\n";
    print "       --remlist \"files\"   Specify which files to remove so that adds and removes can coincide\n";
    print "\n";
    exit(0);
}

# Generate timestamp for debugging/log file
sub
get_timestamp
{
    $ts = POSIX::strftime("%A, %d %B %Y %H:%M:%S %Z", localtime);
    return $ts;
}

# Debugging output
sub
dprintf
{
    return if (! $debug);
    print "[debug:$progname] ";
    printf @_;
}
sub
dprint
{
    print "[debug:$progname] ", @_ if ($debug);
}

# Print an error
sub
eprintf
{
    print STDERR "$progname:  Error:  ";
    printf STDERR @_;
}
sub
eprint
{
    print STDERR "$progname:  Error:  ", @_;
}

# Return the contents of a file as a string
sub
cat_file
{
    my $filename = $_[0];
    my $contents = "";

    open(FF, "$filename") || return undef;
    while (<FF>) {
        $contents .= $_;
    }
    return $contents;
}

# Commit changes to the master repository
sub
commit_to_master
{
    my $logfile = "/var/tmp/.cvs.commit.$$";
    my ($cmd, $username, $fullname, $err, $tries, $line, $module);
    my $cwd = `pwd`;
    my $file_list = join(" ", @_);

    $cwd =~ s/^\S+\/([^\/]+)$/$1/;  # Remove all but the last part
    chomp($cwd);
    dprint "cwd is $cwd\n";
    open(LOGFILE, ">$logfile") || die("Cannot write to $logfile -- $!\n");
    dprint("Opened log file $logfile for commit log\n");
    $username = $ENV{"LOGNAME"};
    @pw_info = getpwnam($username);
    $fullname = $pw_info[6];
    printf LOGFILE "%-25s%45s\n\n", scalar localtime, ($fullname ? "$fullname ($username)" : "$username");
    close(LOGFILE);
    chomp($module = &cat_file("CVS/Repository"));
    dprint "Current directory is \"$cwd\", module name is \"$module\"\n";
    if (! -f "ChangeLog") {
        if ($module eq $cwd) {
            open(CL, ">ChangeLog");
            print "WARNING:  You have no ChangeLog here.  I have created one for you.\n";
            &add_new_files("ChangeLog");
        } else {
            # We're not in the module directory.  Offer to cd to it.
        }
    } else {
        open(CL, ">>ChangeLog");
        if ($file_list !~ /^\s*$/ && $file_list !~ /ChangeLog/) {
            $file_list = "$file_list ChangeLog";
        }
    }
    print "Please edit your commit message now...\n";
    system($ENV{"EDITOR"} ? $ENV{"EDITOR"} : "vi", $logfile);
    open(LOGFILE, "<$logfile");
    while (<LOGFILE>) {
        print CL $_;
    }
    print CL "----------------------------------------------------------------------\n";
    close(CL);
    close(LOGFILE);
    $cmd = sprintf("/bin/sh -c \"cvs $cvsroot commit %s -F $logfile $file_list\"", ($opt_t ? "-r $opt_t" : ""));

    for ($err = 0; (($err == -1) || ($tries == 0)); $tries++) {
        $err = 0;
        dprint "About to run $cmd\n";
        if (!open(CMD, "$cmd 2>&1 |")) {
            eprint "Execution of \"$cmd\" failed -- $!";
            return REVTOOL_COMMAND_FAILED;
        }
        while (<CMD>) {
            chomp($line = $_);
            print "$line\n";
            # Check the output for errors
            if ($line =~ /^cvs \w+: cannot find password/) {
                eprint "You must login to the repository first.\n";
                $err = REVTOOL_BAD_LOGIN;
                last;
            } elsif ($line =~ /^cvs \[\w+ aborted\]: \S+ requires write access to the repository/) {
                eprint "You do not have sufficient access to commit files.\n";
                $err = REVTOOL_ACCESS_DENIED;
                last;
            } elsif ($line =~ /^cvs \[\w+ aborted\]: connect to \S+ failed: Connection refused/) {
                if ($tries < 10) {
                    $err = -1;
                    print "The CVS server seems to be down.  I'll wait a bit and try again.\n";
                    sleep 3;
                } else {
                    eprint "The CVS server was unreachable.\n";
                    $err = REVTOOL_NO_SERVER;
                    last;
                }
            } elsif ($line =~ /^cvs \[\w+ aborted\]: received .* signal/) {
                if ($tries < 10) {
                    $err = -1;
                    print "The CVS server crashed.  I'll wait a bit and try again.\n";
                    sleep 3;
                } else {
                    eprint "The CVS server kept crashing.\n";
                    $err = REVTOOL_SERVER_CRASH;
                    last;
                }
            }
        }
        close(CMD);
        dprint "\"$cmd\" returned $?\n";
    }
    if ($err == 0 && $? != 0) {
        eprint "An unknown error must have occured, because the command returned $?\n";
        $err = REVTOOL_UNSPECIFIED_ERROR;
    }

    unlink $logfile;
    return ($err);
}

# Update from the master repository
sub
update_from_master
{
    my $file_list = join(" ", @_);
    my ($tag, $err, $tries, $line, $cmd, $file, $mode);
    my (@conflicts, @not_found, @removed, @co, @up);

    if ($opt_t) {
        $tag = "-r $opt_t";
    }
    dprint "File list is \"$file_list\", tag is \"$tag\"\n";

    # Figure out which files exist and update those.  Checkout the rest.
    foreach $file (split(/\s+/, $file_list)) {
        if (-e $file) {
            dprint "Updating $file\n";
            push @up, $file;
        } else {
            dprint "Checking out $file\n";
            push @co, $file;
        }
    }

    foreach $mode (0, 1) {
        my ($flist, $subcmd);

        if ($mode) {
            next if ($#co < 0);
            $flist = join(" ", @co);
            $subcmd = "checkout $tag";
        } else {
            next if ($#up < 0);
            $flist = join(" ", @up);
            $subcmd = "update $tag -Pd";
        }
        $cmd = "/bin/sh -c \"cvs $cvsroot $subcmd $flist\"";

        for ($err = 0; (($err == -1) || ($tries == 0)); $tries++) {
            $err = 0;
            dprint "About to run $cmd\n";
            if (!open(CMD, "$cmd 2>&1 |")) {
                eprint "Execution of \"$cmd\" failed -- $!";
                return REVTOOL_COMMAND_FAILED;
            }
            while (<CMD>) {
                chomp($line = $_);
                print "$line\n";
                # Check the output for errors
                if ($line =~ /^cvs \w+: cannot find password/) {
                    eprint "You must login to the repository first.\n";
                    $err = REVTOOL_BAD_LOGIN;
                    last;
                } elsif ($line =~ /^cvs server: cannot find module .(\S+). /) {
                    push @not_found, $1;
                    $err = REVTOOL_FILE_NOT_FOUND;
                } elsif ($line =~ /^cvs server: warning: (\w+) is not \(any longer\) pertinent/) {
                    push @removed, $1;
                    $err = REVTOOL_FILE_REMOVED;
                } elsif ($line =~ /^C /) {
                    $line =~ s/^C //;
                    push @conflicts, $line;
                    $err = REVTOOL_CONFLICT_FOUND;
                } elsif ($line =~ /^cvs \[\w+ aborted\]: no such tag/) {
                    eprint "$opt_t is not a valid tag for $file_list\n";
                    $err = REVTOOL_INVALID_TAG;
                } elsif ($line =~ /^cvs \[\w+ aborted\]: connect to \S+ failed: Connection refused/) {
                    if ($tries < 10) {
                        $err = -1;
                        print "The CVS server seems to be down.  I'll wait a bit and try again.\n";
                        sleep 3;
                    } else {
                        eprint "The CVS server was unreachable.\n";
                        $err = REVTOOL_NO_SERVER;
                        last;
                    }
                } elsif ($line =~ /^cvs \[\w+ aborted\]: received .* signal/) {
                    if ($tries < 10) {
                        $err = -1;
                        print "The CVS server crashed.  I'll wait a bit and try again.\n";
                        sleep 3;
                    } else {
                        eprint "The CVS server kept crashing.\n";
                        $err = REVTOOL_SERVER_CRASH;
                        last;
                    }
                }
            }
            close(CMD);
            dprint "\"$cmd\" returned $?\n";
        }
    }
    if ($err == 0 && $? != 0) {
        eprint "An unknown error must have occured, because the command returned $?\n";
        $err = REVTOOL_UNSPECIFIED_ERROR;
    } elsif ($err) {
        if ($#conflicts != -1) {
            eprint "The following files had conflicts:  ", join(" ", @conflicts), "\n";
        }
        if ($#not_found != -1) {
            eprint "The following files/modules were not found in the repository:  ", join(" ", @not_found), "\n";
        }
        if ($#removed != -1) {
            eprint "The following files/modules were removed from the repository:  ", join(" ", @removed), "\n";
        }
    }
    return $err;
}

# Add new files
sub
add_new_files
{
    my @files = @_;
    my ($file_list, $cmd, $err, $tries, $line);

    if ($#files == -1) {
        print "You've asked me to add files, but you didn't tell me what files to add.\n";
        print "Please enter a whitespace-separated list of files or wildcards:\n";
        $file_list = <STDIN>;
        @files = glob($file_list);
    }
    $file_list = join(" ", @files);
    $cmd = sprintf("/bin/sh -c \"cvs $cvsroot add %s $file_list\"", ($opt_k ? "-k$opt_k" : ""));

    for ($err = 0; (($err == -1) || ($tries == 0)); $tries++) {
        $err = 0;
        dprint "About to run $cmd\n";
        if (!open(CMD, "$cmd 2>&1 |")) {
            eprint "Execution of \"$cmd\" failed -- $!";
            return REVTOOL_COMMAND_FAILED;
        }
        while (<CMD>) {
            chomp($line = $_);
            print "$line\n";
            # Check the output for errors
            if ($line =~ /^cvs \w+: cannot find password/) {
                eprint "You must login to the repository first.\n";
                $err = REVTOOL_BAD_LOGIN;
                last;
            } elsif ($line =~ /^cvs \[\w+ aborted\]: \S+ requires write access to the repository/) {
                eprint "You do not have sufficient access to add files.\n";
                $err = REVTOOL_ACCESS_DENIED;
                last;
            } elsif ($line =~ /^cvs server: nothing known about/) {
                $line =~ s/^cvs server: nothing known about//;
                eprint "You tried to remove the file $line, but it does not exist in the repository.\n";
                $err = REVTOOL_BAD_REMOVAL;
            } elsif ($line =~ /^cvs \[\w+ aborted\]: connect to \S+ failed: Connection refused/) {
                if ($tries < 10) {
                    $err = -1;
                    print "The CVS server seems to be down.  I'll wait a bit and try again.\n";
                    sleep 3;
                } else {
                    eprint "The CVS server was unreachable.\n";
                    $err = REVTOOL_NO_SERVER;
                    last;
                }
            } elsif ($line =~ /^cvs \[\w+ aborted\]: received .* signal/) {
                if ($tries < 10) {
                    $err = -1;
                    print "The CVS server crashed.  I'll wait a bit and try again.\n";
                    sleep 3;
                } else {
                    eprint "The CVS server kept crashing.\n";
                    $err = REVTOOL_SERVER_CRASH;
                    last;
                }
            }
        }
        close(CMD);
        dprint "\"$cmd\" returned $?\n";
    }
    if ($err == 0 && $? != 0) {
        eprint "An unknown error must have occured, because the command returned $?\n";
        $err = REVTOOL_UNSPECIFIED_ERROR;
    }
    return ($err);
}

# Delete old files
sub
delete_old_files
{
    my @files = @_;
    my ($file_list, $cmd, $err, $tries, $line);

    if ($#files == -1) {
        print "You've asked me to remove files, but you didn't tell me what files to remove.\n";
        print "Please enter a whitespace-separated list of files or wildcards:\n";
        $file_list = <STDIN>;
        @files = glob($file_list);
    }
    $file_list = join(" ", @files);
    $cmd = sprintf("/bin/sh -c \"cvs $cvsroot remove -f %s $file_list\"", ($opt_R ? "-R" : ""));

    for ($err = 0; (($err == -1) || ($tries == 0)); $tries++) {
        $err = 0;
        dprint "About to run $cmd\n";
        if (!open(CMD, "$cmd 2>&1 |")) {
            eprint "Execution of \"$cmd\" failed -- $!";
            return REVTOOL_COMMAND_FAILED;
        }
        while (<CMD>) {
            chomp($line = $_);
            print "$line\n";
            # Check the output for errors
            if ($line =~ /^cvs \w+: cannot find password/) {
                eprint "You must login to the repository first.\n";
                $err = REVTOOL_BAD_LOGIN;
                last;
            } elsif ($line =~ /^cvs \[\w+ aborted\]: \S+ requires write access to the repository/) {
                eprint "You do not have sufficient access to remove files.\n";
                $err = REVTOOL_ACCESS_DENIED;
                last;
            } elsif ($line =~ /^cvs server: nothing known about/) {
                $line =~ s/^cvs server: nothing known about//;
                eprint "You tried to add the file $line, but it does not exist in this directory.\n";
                $err = REVTOOL_BAD_ADDITION;
            } elsif ($line =~ /^cvs server: \S+ already exists, with version number/) {
                $line =~ s/^cvs server: (\S+) already exists, with version number (\S+)$/$1 (version $2)/;
                eprint "The following file which you tried to add already exists in the repository:  $line.\n";
                $err = REVTOOL_BAD_ADDITION;
            } elsif ($line =~ /^cvs \[\w+ aborted\]: connect to \S+ failed: Connection refused/) {
                if ($tries < 10) {
                    $err = -1;
                    print "The CVS server seems to be down.  I'll wait a bit and try again.\n";
                    sleep 3;
                } else {
                    eprint "The CVS server was unreachable.\n";
                    $err = REVTOOL_NO_SERVER;
                    last;
                }
            } elsif ($line =~ /^cvs \[\w+ aborted\]: received .* signal/) {
                if ($tries < 10) {
                    $err = -1;
                    print "The CVS server crashed.  I'll wait a bit and try again.\n";
                    sleep 3;
                } else {
                    eprint "The CVS server kept crashing.\n";
                    $err = REVTOOL_SERVER_CRASH;
                    last;
                }
            }
        }
        close(CMD);
        dprint "\"$cmd\" returned $?\n";
    }
    if ($err == 0 && $? != 0) {
        eprint "An unknown error must have occured, because the command returned $?\n";
        $err = REVTOOL_UNSPECIFIED_ERROR;
    }
    return ($err);
}

# Tag the sources
sub
tag_local_sources
{

}

# Import a vendor branch
sub
import_vendor_sources
{

}

# Tag the repository
sub
tag_repository_sources
{

}

# main() here is basically the same as main() in C
sub
main
{
    if ($opt_addlist) {
        $addlist = $opt_addlist;
    } elsif ($opt_a) {
        $addlist = join(" ", @ARGV);
        @ARGV = ();
    } else {
        $addlist = 0;
    }
    if ($opt_remlist) {
        $remlist = $opt_remlist;
    } elsif ($opt_r && !$opt_a) {
        $remlist = join(" ", @ARGV);
        @ARGV = ();
    } else {
        $remlist = 0;
    }
    if ($addlist) {
        &add_new_files($addlist);
    }
    if ($remlist) {
        &delete_old_files($remlist);
    }
    if ($opt_g) {
        $retval = &update_from_master(@ARGV);
    } elsif ($opt_p) {
        if (!($retval = &update_from_master($opt_x ? @ARGV : undef))) {
            if ($opt_x) {
                &commit_to_master(@ARGV, ($addlist ? $addlist : undef), ($remlist ? $remlist : undef));
            } else {
                &commit_to_master();
            }
        }
    }
}

BEGIN {

    # Set up the basic variables
    $progname = "revtool";
    $version = "0.1.0";
    $argc = $#ARGV + 2;
    $retval = 0;

    # Synchronize output so it doesn't get all jumbled
    select STDERR; $| = 1;
    select STDOUT; $| = 1;

    # See the Getopt::Mixed man page for details on the syntax of this line
    $valid_opts = "h help>h v version>v d debug>d g get>g p put>p a add>a r remove>r"
                  . " R recurse>R t=s tag>t i=s import>i k=s D=s dir>D x exclusive>x"
                  . " addlist=s remlist=s";

    Getopt::Mixed::getOptions($valid_opts);
    $debug = $opt_d;
    $binary = $opt_b;
    $cvsroot = "-d $opt_D" if ($opt_D);
    if ($opt_v) {
	print "$progname $version by Michael Jennings\n";
        print "Copyright (c) 2000, Michael Jennings and VA Linux Systems, Inc.\n";
	exit(0);
    }
    if ($opt_h || $argc == 1) {
	&print_usage_info();   # Never returns
    }
}

&main();

END {

}

exit $retval;
