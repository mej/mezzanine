#!/usr/bin/perl
#
# revtool -- Source Code Revision Control Tool
# 
# Copyright (C) 2000, Michael Jennings
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to
# deal in the Software without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
# sell copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies of the Software, its documentation and marketing & publicity
# materials, and acknowledgment shall be given in the documentation, materials
# and software packages that this Software was used.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
# IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
# $Id: revtool,v 1.77 2001/08/20 17:34:45 mej Exp $
#

# Include the Perl Modules we need
use Getopt::Long;
use Avalon::Util;
use Avalon::RevCtl;

# Print usage information
sub
print_usage_info
{
    print "\n";
    $leader = "$progname $version Usage Information";
    $underbar = $leader;
    $underbar =~ s/./-/g;
    print "$leader\n$underbar\n";
    print "\n";
    print "  Syntax:   $progname [ options ] [ files ]\n";
    print "\n";
    print "    -h --help                Show this usage information\n";
    print "    -d --debug               Turn on debugging\n";
    print "    -v --version             Show version and copyright\n";
    print "    -g --get                 Download and/or merge the current sources from the master tree\n";
    print "    -p --put                 Upload new changes to the master tree\n";
    print "    -a --add                 Mark new files for addition into the master tree\n";
    print "    -r --remove              Delete files and mark them for deletion in the master tree\n";
    print "    -q --query <type>        Query for a particular type of information\n";
    print "    -i --import              Import a new set of sources, or update the vendor branch for a package\n";
    print "    -t --tag <tag>           Specify a symbolic tag for an operation, or tag local sources\n";
    print "    -T --rtag <tag>          Tag one or more complete modules directly\n";
    print "    -b --branch              When performing a tag, make it a branch tag\n";
    print "    -l --login               Perform a login to the repository\n";
    print "    -R --recurse             Operate recursively (this is the default for some commands)\n";
    print "    -k [code]                Specify keyword handling when adding files (use -kb to add binary files)\n";
    print "    -D --dir                 Specify an alternative repository (\$REPOSITORY)\n";
    print "    -x --exclusive           Only commit the specified files\n";
    print "       --reset               Reset sticky tags, dates, etc. in the current module\n";
    print "       --blind               Do not update before committing (may result in conflicts, use carefully)\n";
    print "\n";
    exit(0);
}

# main() here is basically the same as main() in C
sub
main
{
    # Set up the basic variables
    $progname = "revtool";
    $version = "2.1";
    &print_usage_info() if (!scalar(@ARGV) && &basename($0) !~ /^av/);
    $retval = 0;
    umask 022;

    # Synchronize output so it doesn't get all jumbled
    select STDERR; $| = 1;
    select STDOUT; $| = 1;

    # See the Getopt::Long man page for details on the syntax of this line
    @valid_opts = ("h|help", "v|version", "d|debug", "g|get", "p|put", "a|add", "r|remove",
                   "q|query=s", "R|recurse", "t|tag=s", "i|import", "k=s", "D|dir=s",
                   "x|exclusive", "T|rtag=s", "l|login", "b|branch", "reset", "blind",
                   "P|protocol=s");

    Getopt::Long::Configure("no_getopt_compat", "bundling", "no_ignore_case");
    Getopt::Long::GetOptions(@valid_opts);
    &debug_set($opt_d);
    $revctl_system = $opt_P if ($opt_P);

    # Set the mode, first based on executable name...
    if ($0 =~ /(get|co|checkout)$/) {
        $mode = "get";
        $opt_g = 1;
    } elsif ($0 =~ /(put|ci|commit|checkin)$/) {
        $mode = "put";
        $opt_p = 1;
    } elsif ($0 =~ /import$/) {
        $mode = "import";
    } elsif ($0 =~ /(ask|query|info)$/) {
        $mode = "query";
    } elsif ($0 =~ /diff$/) {
	$mode = "query";
	$query = 'd';
    } elsif ($0 =~ /stat(us)?$/) {
	$mode = "query";
	$query = 's';
    } elsif ($0 =~ /log$/) {
	$mode = "query";
	$query = 'l';
    } elsif ($0 =~ /(add|new)$/) {
        $mode = "add";
        $opt_a = 1;
    } elsif ($0 =~ /(rm|remove|kill|nuke|purge)$/) {
        $mode = "remove";
        $opt_r = 1;
    } elsif ($0 =~ /rtag$/) {
        $mode = "rtag";
    } elsif ($0 =~ /(tag|label|mark)$/) {
        $mode = "tag";
    } elsif ($0 =~ /reset$/) {
        $mode = "reset";
        $opt_reset = 1;
    } elsif ($0 =~ /login$/) {
        $mode = "login";
    # ...then on command line options
    } elsif ($opt_i) {
        $mode = "import";
    } elsif ($opt_q) {
        $mode = "query";
        $query = $opt_q;
    } elsif ($opt_p) {
        $mode = "put";
    } elsif ($opt_g) {
        $mode = "get";
    } elsif ($opt_a) {
        $mode = "add";
    } elsif ($opt_r) {
        $mode = "remove";
    } elsif ($opt_t) {
        $mode = "tag";
    } elsif ($opt_T || $opt_b) {
        $mode = "rtag";
    } elsif ($opt_reset) {
        $mode = "reset";
    } elsif ($opt_l) {
        $mode = "login";
    }
    if ($opt_v) {
        # Do not edit this variable.  It is updated automatically by CVS when you commit
        my $rcs_info = 'CVS Revision $Revision: 1.77 $ created on $Date: 2001/08/20 17:34:45 $ by $Author: mej $ ';

        $rcs_info =~ s/\$\s*Revision: (\S+) \$/$1/;
        $rcs_info =~ s/\$\s*Date: (\S+) (\S+) \$/$1 at $2/;
        $rcs_info =~ s/\$\s*Author: (\S+) \$ /$1/;
        print "\n";
	print "$progname $version by Michael Jennings <mej\@eterm.org>\n";
        print "Copyright (c) 2000, Michael Jennings and VA Linux Systems, Inc.\n";
        print "  ($rcs_info)\n";
        print "\n";
	exit(0);
    }
    if ($opt_h) {
	&print_usage_info();   # Never returns
    }

    &revctl_repository($opt_D);
    &revctl_keyword_expansion($opt_k);
    &revctl_recursion($opt_R);
    &revctl_branching($opt_b);
    &revctl_sticky_clear($opt_reset);
    &revctl_exclusive($opt_x);
    &revctl_tag($opt_t);
    &revctl_rtag($opt_T);
    dprint "Debugging is on, mode is $mode, CVSROOT is ${\(&revctl_repository())},"
        . " tag is ${\(&revctl_tag())}, rtag is ${\(&revctl_rtag())}\n";

    if ($opt_l) {
        &login_to_master();
        return if ($mode eq "login");
    }
    if ($mode eq "import") {
        &import_vendor_sources(@ARGV);
    } elsif ($mode eq "query") {
        if ($query eq "s") {
            &query_status(@ARGV);
        } elsif ($query eq "l") {
            &query_log(@ARGV);
        } elsif ($query eq "a") {
            &query_annotation(@ARGV);
        } elsif ($query eq "d") {
            &query_diff(@ARGV);
        } elsif ($query eq "D") {
            &query_release_diff(@ARGV);
        }
    } elsif ($mode eq "tag") {
        &revctl_tag(shift @ARGV) if (! &revctl_tag());
        &tag_local_sources(@ARGV);
    } elsif ($mode eq "rtag") {
        &revctl_rtag(shift @ARGV) if (! &revctl_rtag());
        &tag_repository_sources(@ARGV);
    } else {
        if ($opt_a) {
            &add_new_files(@ARGV);
        } elsif ($opt_r) {
            &delete_old_files(@ARGV);
        }
        if ($mode eq "get" || &revctl_sticky_clear()) {
            $retval = &update_from_master(@ARGV);
        } elsif ($mode eq "put") {
            if ($opt_blind || !($retval = &update_from_master(&revctl_exclusive() ? @ARGV : undef))) {
                my $logfile;

                if (&revctl_exclusive()) {
                    $logfile = &do_changelog_entry(scalar(grep($_ eq "ChangeLog", @ARGV)));
                    if ($logfile) {
                        $retval = &commit_to_master($logfile, @ARGV);
                        unlink($logfile, "$logfile~");
                    }
                } else {
                    $logfile = &do_changelog_entry(1);
                    if ($logfile) {
                        $retval = &commit_to_master($logfile);
                        unlink($logfile, "$logfile~");
                    }
                }
            }
        }
    }
    return $retval;
}

exit &main();
