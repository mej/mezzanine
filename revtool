#!/usr/bin/perl
#
# revtool -- Source Code Revision Control Tool
# 
# Copyright (C) 2000, Michael Jennings
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to
# deal in the Software without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
# sell copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies of the Software, its documentation and marketing & publicity
# materials, and acknowledgment shall be given in the documentation, materials
# and software packages that this Software was used.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
# IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
# $Id: revtool,v 1.13 2000/05/10 05:38:30 mej Exp $
#

# Include the Perl Modules we need
use POSIX;
use Getopt::Mixed;

# Print usage information
sub
print_usage_info
{
    print "\n";
    $leader = "$progname $version Usage Information";
    $underbar = $leader;
    $underbar =~ s/./-/g;
    print "$leader\n$underbar\n";
    print "\n";
    print "  Syntax:   $progname [ options ]\n";
    print "\n";
    print "    -h --help                Show this usage information\n";
    print "    -d --debug               Turn on debugging\n";
    print "    -v --version             Show version and copyright\n";
    print "    -g --get                 Download and/or merge the current sources from the master tree\n";
    print "    -p --put                 Upload new changes to the master tree\n";
    print "    -a --add                 Mark new files for addition into the master tree\n";
    print "    -r --remove              Delete files and mark them for deletion in the master tree\n";
    print "    -R --recurse             Operate recursively (this is the default for some commands)\n";
    print "    -t --tag                 Specify a symbolic tag\n";
    print "    -i --import              Import a new set of sources, or update the vendor branch for a package\n";
    print "    -k [code]                Specify keyword handling when adding files (use -kb to add binary files)\n";
    print "    -D --dir                 Specify an alternative repository (\$CVSROOT)\n";
    print "    -x --exclusive           Only commit the specified files\n";
    print "       --addlist \"files\"   Specify which files to add so that adds and removes can coincide\n";
    print "       --remlist \"files\"   Specify which files to remove so that adds and removes can coincide\n";
    print "\n";
    exit(0);
}

# Generate timestamp for debugging/log file
sub
get_timestamp
{
    $ts = POSIX::strftime("%A, %d %B %Y %H:%M:%S %Z", localtime);
    return $ts;
}

# Debugging output
sub
dprintf
{
    return if (! $debug);
    print "[debug:$progname] ";
    printf @_;
}
sub
dprint
{
    print "[debug:$progname] ", @_ if ($debug);
}

# Print an error
sub
eprintf
{
    print STDERR "$progname:  Error:  ";
    printf STDERR @_;
}
sub
eprint
{
    print STDERR "$progname:  Error:  ", @_;
}

# Return the contents of a file as a string
sub
cat_file
{
    my $filename = $_[0];
    my $contents = "";

    open(FF, "$filename") || return undef;
    while (<FF>) {
        $contents .= $_;
    }
    return $contents;
}

# Commit changes to the master repository
sub
commit_to_master
{
    my $logfile = "/var/tmp/.cvs.commit.$$";
    my ($command, $username, $fullname, $rc);
    my $cwd = `pwd`;
    my $file_list = join(" ", @_);

    $cwd =~ s/[^\/]+\///;  # Remove all but the last part
    dprint "cwd is $cwd\n";
    open(LOGFILE, ">$logfile") || die("Cannot write to $logfile -- $!\n");
    dprint("Opened log file $logfile for commit log\n");
    $username = $ENV{"LOGNAME"};
    @pw_info = getpwnam($username);
    $fullname = $pw_info[6];
    printf LOGFILE "%-25s%45s\n\n", scalar localtime, ($fullname ? "$fullname ($username)" : "$username");
    close(LOGFILE);
    print "Please edit your commit message now...\n";
    system($ENV{"EDITOR"} ? $ENV{"EDITOR"} : "vi", $logfile);
    open(LOGFILE, "<$logfile");
    if ((! -f "ChangeLog") && (&cat_file("CVS/Repository") eq $cwd)) {
        open(CL, ">>ChangeLog");
        print "WARNING:  You have no ChangeLog here.  I have created one for you.\n";
        &add_new_files("ChangeLog");
    } else {
        open(CL, ">>ChangeLog");
    }
    while (<LOGFILE>) {
        print CL $_;
    }
    print CL "----------------------------------------------------------------------\n";
    close(CL);
    close(LOGFILE);
    $command = sprintf("/bin/sh -c \"cvs $cvsroot commit %s -F $logfile $file_list\"", ($opt_t ? "-r $opt_t" : ""));
    $rc = system($command) >> 8;
    unlink $logfile;
    return ($rc);
}

# Update from the master repository
sub
update_from_master
{
    my $file_list = join(" ", @_);
    my $tag;

    if ($opt_t) {
        $tag = "-r $opt_t";
    }
    dprint "File list is \"$file_list\", tag is \"$tag\"\n";
    $command = sprintf("/bin/sh -c \"cvs $cvsroot %s\"",
                       ($file_list =~ /^\s*$/ ? "update -Pd" : "checkout $tag $file_list"));
    dprint "About to run $command\n";
    $rc = system($command) >> 8;
    return $rc;
}

# Add new files
sub
add_new_files
{
    my @files = @_;
    my ($file_list, $command, $rc);

    if ($#files == -1) {
        print "You've asked me to add files, but you didn't tell me what files to add.\n";
        print "Please enter a whitespace-separated list of files or wildcards:\n";
        $file_list = <STDIN>;
        @files = glob($file_list);
    }
    $file_list = join(" ", @files);
    $command = sprintf("/bin/sh -c \"cvs $cvsroot add %s $file_list\"", ($opt_k ? "-k$opt_k" : ""));
    $rc = system($command) >> 8;
    return ($rc);
}

# Delete old files
sub
delete_old_files
{
    my @files = @_;
    my ($file_list, $command, $rc);

    if ($#files == -1) {
        print "You've asked me to remove files, but you didn't tell me what files to remove.\n";
        print "Please enter a whitespace-separated list of files or wildcards:\n";
        $file_list = <STDIN>;
        @files = glob($file_list);
    }
    $file_list = join(" ", @files);
    $command = sprintf("/bin/sh -c \"cvs $cvsroot remove -f %s $file_list\"", ($opt_R ? "-R" : ""));
    $rc = system($command) >> 8;
    return ($rc);
}

# Tag the sources
sub
tag_local_sources
{

}

# Import a vendor branch
sub
import_vendor_sources
{

}

# Tag the repository
sub
tag_repository_sources
{

}

# main() here is basically the same as main() in C
sub
main
{
    if ($opt_addlist) {
        $addlist = $opt_addlist;
    } elsif ($opt_a) {
        $addlist = @ARGV;
    } else {
        $addlist = 0;
    }
    if ($opt_remlist) {
        $remlist = $opt_remlist;
    } elsif ($opt_r && !$opt_a) {
        $remlist = @ARGV;
    } else {
        $remlist = 0;
    }
    if ($addlist) {
        &add_new_files($addlist);
    }
    if ($remlist) {
        &delete_old_files($remlist);
    }
    if ($opt_g) {
        $retval = &update_from_master(@ARGV);
    } elsif ($opt_p) {
        if (!($retval = &update_from_master(undef))) {
            if ($opt_x) {
                &commit_to_master(@ARGV, $addlist, $remlist);
            } else {
                &commit_to_master();
            }
        }
    }
}

BEGIN {

    # Set up the basic variables
    $progname = "revtool";
    $version = "0.1.0";
    $argc = $#ARGV + 2;
    $retval = 0;
    # See the Getopt::Mixed man page for details on the syntax of this line
    $valid_opts = "h help>h v version>v d debug>d g get>g p put>p a add>a r remove>r"
                  . " R recurse>R t=s tag>t i=s import>i k=s D=s dir>D x exclusive>x"
                  . " addlist=s remlist=s";

    Getopt::Mixed::getOptions($valid_opts);
    $debug = $opt_d;
    $binary = $opt_b;
    $cvsroot = "-d $opt_D" if ($opt_D);
    if ($opt_v) {
	print "$progname $version by Michael Jennings\n";
        print "Copyright (c) 2000, Michael Jennings and VA Linux Systems, Inc.\n";
	exit(0);
    }
    if ($opt_h || $argc == 1) {
	&print_usage_info();   # Never returns
    }
}

&main();

END {

}

exit $retval;
