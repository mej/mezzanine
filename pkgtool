#!/usr/bin/perl -w
#
# pkgtool -- Tool for generating source/patch files from a source code repository
# 
# Copyright (C) 2000, Michael Jennings
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to
# deal in the Software without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
# sell copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies of the Software, its documentation and marketing & publicity
# materials, and acknowledgment shall be given in the documentation, materials
# and software packages that this Software was used.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
# IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
# $Id: pkgtool,v 1.15 2000/07/12 03:51:59 mej Exp $
#

# Include the Perl Modules we need
require POSIX;
require Getopt::Long;

# Constants
#
# Keep these in sync with the ones in revtool, or
# talk perl into using headers and #define's.
#
# 1-20 are generic errors
sub REVTOOL_NO_SERVER()           {1;}
sub REVTOOL_SERVER_CRASH()        {2;}
sub REVTOOL_BAD_LOGIN()           {3;}
sub REVTOOL_COMMAND_FAILED()      {4;}
sub REVTOOL_ACCESS_DENIED()       {5;}
sub REVTOOL_NO_SOURCES()          {6;}

# 21-40 are retrieval/update errors
sub REVTOOL_FILE_NOT_FOUND()      {21;}
sub REVTOOL_FILE_REMOVED()        {22;}
sub REVTOOL_CONFLICT_FOUND()      {23;}
sub REVTOOL_INVALID_TAG()         {24;}

# 41-60 are add/remove errors
sub REVTOOL_BAD_ADDITION()        {41;}
sub REVTOOL_BAD_REMOVAL()         {42;}

# 61-80 are commit errors
sub REVTOOL_NEED_UPDATE()         {61;}

# 127 is a catch-all
sub REVTOOL_UNSPECIFIED_ERROR()   {127;}


# Return codes for pkgtool
sub PKGTOOL_SUCCESS()           {0;}
sub PKGTOOL_FATAL_ERROR()       {1;}
sub PKGTOOL_SYNTAX_ERROR()      {2;}
sub PKGTOOL_COMMAND_FAILED()    {3;}

sub PKGTOOL_MISSING_FILES()     {10;}
sub PKGTOOL_SPEC_ERRORS()       {11;}
sub PKGTOOL_DEPENDENCIES()      {12;}
sub PKGTOOL_ARCH_MISMATCH()     {13;}
sub PKGTOOL_BUILD_FAILURE()     {14;}
sub PKGTOOL_BAD_MODULE()        {15;}

sub PKGTOOL_TERMINATED()        {50;}
sub PKGTOOL_CRASHED()           {60;}
sub PKGTOOL_UNSPECIFIED_ERROR   {127;}

# Print usage information
sub
print_usage_info
{
    print "\n";
    $leader = "$progname $version Usage Information";
    $underbar = $leader;
    $underbar =~ s/./-/g;
    print "$leader\n$underbar\n";
    print "\n";
    print "  Syntax:   pkgtool [ options ]\n";
    print "\n";
    print "    -h --help                        Show this usage information\n";
    print "    -d --debug                       Turn on debugging\n";
    print "    -v --version                     Show version and copyright\n";
    print "    -b --build                       Build a package\n";
    print "    -i --install                     Install (unarchive) a package\n";
    print "    -c --contents                    Check the contents of a package\n";
    print "    -o --sources [srcs]              Specify the sources to generate\n";
    print "    -p --package <file>              Specify the package filename\n";
    print "    -s --specfile --scripts <path>   Specify the spec file (or debian script directory) to use\n";
    print "    -m --module <name>               Specify the module name\n";
    print "    -r --release-tag <tag>           Operate on the revisions starting at <tag>\n";
    print "    -t --head-tag <tag>              Operate on the revisions up to and including <tag>\n";
    print "    -P --program <cmd>               Specify the package management program to be used\n";
    print "    -R --rcfile <rcfile>             Specify an alternate rpmrc file\n";
    print "    -D --dir <directory>             Specify \"directory\" as the full path to the module\n";
    print "       --root <dir>                  Specify the build/install root (depending on mode)\n";
    print "       --tar <tarcmd>                Use <tarcmd> as the \"tar\" command\n";
    print "       --zip <zipcmd>                Use <zipcmd> as the compression program\n";
    print "\n";
    exit(PKGTOOL_SUCCESS);
}

# Generate timestamp for debugging/log file
sub
get_timestamp
{
    return POSIX::strftime("%A, %d %B %Y %H:%M:%S %Z", localtime);
}

# Report a fatal error
sub
fatal_error
{
    my $msg = "$progname:  FATAL:  $_[0]";

    print STDERR $msg;
    exit(PKGTOOL_FATAL_ERROR);
}

# Debugging output
sub
dprintf
{
    return if (! $debug);
    print "[debug:$progname] ";
    printf @_;
}
sub
dprint
{
    my @dbg;
    my ($f, $l, $s);

    return if (! $debug);
    @dbg = caller(1);
    ($f, $l, $s) = @dbg[1, 2, 3];
    $f =~ s/^.*\/([^\/]+)$/$1/;
    print "[$f/$l/$s()] ", @_;
}

# Print an error
sub
eprintf
{
    print "$progname:  Error:  ";
    printf @_;
}
sub
eprint
{
    print "$progname:  Error:  ", @_;
}

# Handle a terminate signal
sub
handle_signal
{
    my $sig = $_[0];

    eprint "Someone sent me a SIG$sig asking me to exit, so I shall.\n";
    close($GLOBAL_LOG) if ($GLOBAL_LOG);
    exit PKGTOOL_TERMINATED;
}

# Handle a fatal signal
sub
handle_fatal_signal
{
    my $sig = $_[0];

    eprint "Caught fatal signal SIG$sig.  Cleaning up and aborting...\n";
    close($GLOBAL_LOG) if ($GLOBAL_LOG);
    exit PKGTOOL_CRASHED;
}

# Handle a perl warning
sub
handle_warning
{
    dprint @_;
}

sub
should_ignore
{
    my $fname = $_[0];

    # Ignore revision control goop
    return 1 if ($fname =~ /^(CVS|SCCS|RCS|BitKeeper)$/);
    # Ignore the revtool-generated ChangeLog
    return 1 if ($fname =~ /^[Cc]hanges?\.?[Ll]og$/);
    # Ignore dotfiles
    return 1 if ($fname =~ /^\./);
    # Ignore spec files
    return 1 if ($fname =~ /\.spec(\.in)?$/);
    # Ignore the debian/ directory
    return 1 if ($fname =~ /^debian$/ && -d $fname);

    return 0;
}

# Add a %define
sub
add_define
{
    my ($var, $value) = @_;

    $define{$var} = $value;
    dprint "Added \%define:  $var -> $define{$var}\n";
}

# Replace %define's in a spec file line with their values
sub
replace_defines
{
    my $line = $_[0];

    while ($line =~ /\%(\w+)/g) {
        my $var = $1;

        dprint "Found macro:  $var\n";
        if (defined $define{$var}) {
            dprint "Replacing with:  $define{$var}\n";
            $line =~ s/\%$var/$define{$var}/g;
            reset;
        } else {
            dprint "Definition not found.\n";
        }
    }
    while ($line =~ /\%\{([^\}]+)\}/g) {
        my $var = $1;

        dprint "Found macro:  $var\n";
        if (defined $define{$var}) {
            dprint "Replacing with:  $define{$var}\n";
            $line =~ s/\%\{$var\}/$define{$var}/g;
            reset;
        } else {
            dprint "Definition not found.\n";
        }
    }
    return $line;
}

# Parse spec file
sub
parse_spec_file
{
    my $specfile = $_[0];
    my ($line, $oldline, $stage, $pkg);
    local *SPECFILE;

    if (! $specfile) {
        # Look in the specified module
    }

    open(SPECFILE, $specfile) || &fatal_error("Unable to open $specfile -- $!\n");
    $stage = 0;
    while (<SPECFILE>) {
        chomp($line = $_);
        next if ($line =~ /^\s*\#/ || $line =~ /^\s*$/);
        $oldline = $line;
        $line = &replace_defines($oldline);
        if ($oldline ne $line) {
            dprint "Parsing from $specfile, line $.: \"$oldline\" -> \"$line\"\n";
        } else {
            dprint "Parsing from $specfile, line $.: \"$line\"\n";
        }
        if ($line =~ /^\%(prep|build|install|clean|changelog|trigger|triggerpostun|triggerun|triggerin|verifyscript)\s*$/
            || $line =~ /^\%(package|preun|pre|postun|post|files|description)(\s+\w+)?$/) {
            my $param = $2;

            $stage = $1;
            dprint "Switching to stage \"$stage\"\n";
            if ($stage eq "package" && $param) {
                $pkg = "$packages[0]-$param";
                push @packages, $pkg;
            }
        } elsif ((! $stage) && $line =~ /^\s*(\w+)\s*:\s*(.*)$/) {
            my ($var, $value) = ($1, $2);

            $var =~ tr/[A-Z]/[a-z]/;
            if ($var eq "name") {
                $pkg = $value;
                @packages = ($pkg);
                &add_define("PACKAGE_NAME", $value);
            } elsif ($var =~ /^source(\d*)$/) {
                my $key = ($1 ? $1 : "0");

                $value =~ s/^.*\/([^\/]+)$/$1/;
                $source{$key} = $value;
                &add_define("SOURCE$key", $value);
            } elsif ($var =~ /^patch(\d*)$/) {
                my $key = ($1 ? $1 : "0");

                $value =~ s/^.*\/([^\/]+)$/$1/;
                $patch{$key} = $value;
                &add_define("PATCH$key", $value);
            } else {
                $header{$var} = $value;
                if ($var eq "version") {
                    &add_define("PACKAGE_VERSION", $value);
                } elsif ($var eq "release") {
                    &add_define("PACKAGE_RELEASE", $value);
                }
            }
        } elsif ($line =~ /^%\s*define\s*(\w+)\s*(.*)$/) {
            &add_define($1, $2);
        }
    }
    close(SPECFILE);

    @sources = sort {$a <=> $b} keys %source;
    @patches = sort {$a <=> $b} keys %patch;
    @headers = sort {uc($a) cmp uc($b)} keys %header;

    if ($debug) {
        dprint "Got the following sources:\n";
        foreach $src (@sources) {
            dprint "    Source $src -> $source{$src}\n";
        }
        dprint "Got the following patches:\n";
        foreach $p (@patches) {
            dprint "    Patch $p -> $patch{$p}\n";
        }
        dprint "Got the following header info:\n";
        foreach $h (@headers) {
            dprint "    $h -> $header{$h}\n";
        }
    }
}

# Emulate rm -rf
sub
nuke_tree
{
    my $path = $_[0];
    my @files;
    local *DIR;

    if ((-d $path) && !(-l $path)) {
        opendir(DIR, $path) || return 0;
        @files = readdir(DIR);
        closedir(DIR);
        foreach $f (@files) {
            if ($f ne "." && $f ne "..") {
                &nuke_tree("$path/$f");
            }
        }
        dprint "Removing directory $path\n";
        rmdir $path || return 0;
    } else {
        dprint "Unlinking $path\n";
        unlink($path) || return 0;
    }
    return 1;
}

sub
get_tag_list
{
    my $tagfile = $_[0];
    my ($cmd, $line);
    my @tags;
    local *CMD;

    $cmd = "revtool -qt $tagfile";
    if (!open(CMD, "$cmd 2>&1 |")) {
        eprint "Execution of \"$cmd\" failed -- $!\n";
    }
    while (<CMD>) {
        chomp($line = $_);
        if ($line =~ /^([-A-Z0-9]+) at (revision|branch) [.\d]+$/) {
            unshift @tags, $1;  # Place new tags at end so older tags come first
            $tag_type{$1} = $2;
        } elsif ($line =~ /^No tags found/) {
            eprint "The sample tag file ($tagfile) contains no tags.\n";
            last;
        } else {
            eprint "Unexpected output from revtool:  $line\n";
        }
    }
    close(CMD);
    return @tags;
}

sub
fetch_package
{
    my $cmd = $_[0];
    my ($err, $msg, $line) = undef;
    local *REVTOOL;

    dprint "About to run $cmd\n";
    if (!open(REVTOOL, "$cmd 2>&1 |")) {
        $err = REVTOOL_COMMAND_FAILED;
        $msg = "Execution of \"$cmd\" failed -- $!";
        last;
    }
    while (<REVTOOL>) {
        chomp($line = $_);
        if ($debug) {
            dprint "From revtool -> $line\n";
        }
        next if ($line =~ /^\[debug:/);
        # Check the output for errors
        if ($line =~ /^revtool:\s*Error/) {
            ($msg = $line) =~ s/^revtool:\s*Error:\s*//;
        }
    }
    close(REVTOOL);
    $err = $?;
    dprintf "\"$cmd\" returned $err (%d)\n", $err >> 8;
    return ($err >> 8, $msg);
}

sub
update_to_tag
{
    my ($tag, $src_files) = @_;
    my ($err, $msg, $cmd, $line) = undef;
    my (@new_files);
    local *REVTOOL;

    $tag = ($tag ? "-t $tag" : "--reset");
    $cmd = "revtool -g $tag" . ($src_files ? " $src_files" : "");
    dprint "About to run $cmd\n";
    if (!open(REVTOOL, "$cmd 2>&1 |")) {
        $err = REVTOOL_COMMAND_FAILED;
        $msg = "Execution of \"$cmd\" failed -- $!";
        last;
    }
    while (<REVTOOL>) {
        chomp($line = $_);
        if ($debug) {
            dprint "From revtool -> $line\n";
        }
        next if ($line =~ /^\[debug:/);
        # Check the output for errors
        if ($line =~ /^U (\S+)$/) {
            push @new_files, $1;
        } elsif ($line =~ /is not a valid tag/) {
            eprint "$tag does not seem to be valid for this package.\n";
            last;
        } elsif ($line =~ /^revtool:\s*Error/) {
            ($msg = $line) =~ s/^revtool:\s*Error:\s*//;
            eprint "$msg\n";
        }
    }
    close(REVTOOL);
    $err = $?;
    dprintf "Command returned $err (%d)\n", $err >> 8;
    return @new_files;
}

sub
create_source_file
{
    my ($src_files, $tarball, $destdir, $tar, $zip) = @_;
    my $cmd;
    local *CMD;

    dprint "Source files:  \"$src_files\"\n";
    if ($tarball) {
        print "Generating $tarball...\n";
        if ($tar) {
            $cmd = $tar;
            $cmd =~ s/\%f/$src_files/;
            $cmd =~ s/\%t/$destdir$tarball/;
        } else {
            if (! $zip) {
                if ($tarball =~ /(gz|Z)$/) {
                    $zip = "gzip";
                } elsif ($tarball =~ /\.bz2$/) {
                    $zip = "bzip2";
                }
            }
            if ($zip) {
                $zip = " --use-compress-program=$zip";
            } else {
                $zip = " ";
            }
            $cmd = "tar --exclude CVS --exclude RCS --exclude BitKeeper --exclude SCCS"
                   . "$zip -cf ${destdir}$tarball $src_files";
        }
        dprint "Creating $tarball:  $cmd\n";
        unlink($tarball);
        if (!open(CMD, "$cmd 2>&1 |")) {
            eprint "Execution of \"$cmd\" failed -- $!\n";
            return PKGTOOL_COMMAND_FAILED;
        }
        while (<CMD>) {
            chomp($line = $_);
            print "tar output -> $line\n";
        }
        close(CMD);
        dprint "Command returned $?\n";
        if ($?) {
            eprint "Creation of vendor source tarball $tarball failed\n";
            return PKGTOOL_BUILD_FAILURE;
        }
    } else {
        my $rc;

        print "Copying $src_files to $destdir.\n";
        $rc = system("cp -f $src_files $destdir") >> 8;
        if ($rc) {
            eprint "Unable to copy $src_files to $destdir -- $!\n";
            return PKGTOOL_BUILD_FAILURE;
        }
    }
    return PKGTOOL_SUCCESS;
}

# Return the contents of a file as a string
sub
cat_file
{
    my $filename = $_[0];
    my $contents = "";

    open(FF, "$filename") || return undef;
    while (<FF>) {
        $contents .= $_;
    }
    return $contents;
}

sub
gen_diff
{
    my ($module, $src_files, $prev_tag, $tag, $patch) = @_;
    my ($cmd, $line_cnt, $ignore, $fname);
    my @src_files;
    local (*CMD, *PATCH);

    @src_files = split(" ", $src_files);
    if (!open(PATCH, ">$patch")) {
        eprint "Unable to write to patch file $patch -- $!\n";
        return PKGTOOL_BUILD_FAILURE;
    }
    $cmd = "revtool -qD -t '$prev_tag $tag' $module";
    dprint "About to run \"$cmd\"\n";
    if (!open(CMD, "$cmd 2>/dev/null |")) {
        eprint "Execution of \"$cmd\" failed -- $!\n";
        return PKGTOOL_COMMAND_FAILED;
    }
    $line_cnt = $ignore = 0;
    while (<CMD>) {
        chomp($line = $_);
        next if ($line =~ /^revtool/);
        if ($line =~ /^Index: (\S+)$/) {
            my @tmp;

            ($fname = $1) =~ s/^$module\///;
            @tmp = grep(($fname eq $_) || ($fname =~ /^$_\//), @src_files);
            if ($#tmp < 0) {
                # Not a source file.  Ignore it.
                dprint "Ignoring patch to $fname\n";
                $ignore = 1;
            } else {
                # A source file.  Include it.
                dprint "Now diffing $fname\n";
                $ignore = 0;
            }
        } elsif ($line =~ /^(diff|---|\+\+\+|\*\*\*)/) {
            $line =~ s/$module\/$fname/$fname/g;
        }
        next if ($ignore);

        if ($line =~ /^[-I=Rrd+\s@\*]/) {
            print PATCH "$line\n";
            $line_cnt++;
        } else {
            dprint "Extra line in diff:  $line\n";
        }
    }
    close(CMD);
    close(PATCH);
    print "Generated $patch ($line_cnt lines).\n";
    dprint "\"$cmd\" returned $?\n";
    return PKGTOOL_SUCCESS;
}

sub
touch_file
{
    my $file = $_[0];
    local *TMP;

    open(TMP, ">$file") && close(TMP);
}

sub
rpm_install
{
    my $pkg_file = $_[0];
    my ($rpm, $cmd, $rc, $err, $msg);
    my (@failed_deps);
    local *RPM;

    $rpm = ($pkg_prog ? $pkg_prog : "rpm");
    $rc = ($rcfile ? "--rcfile '/usr/lib/rpm/rpmrc:$rcfile'" : "");
    $cmd = "$rpm $rc" . ($rootdir ? " --root $rootdir " : " ") . "-U $pkg_file";
    dprint "About to run \"$cmd\"\n";
    if (!open(RPM, "$cmd 2>&1 |")) {
        eprint "Execution of \"$cmd\" failed -- $!\n";
    }
    $err = PKGTOOL_SUCCESS;
    while (<RPM>) {
        chomp($line = $_);
        print "$line\n";
        if ($line =~ /^error: failed build dependencies:/) {
            $err = PKGTOOL_DEPENDENCIES;
            while (<RPM>) {
                chomp($line = $_);
                last if ($line !~ /is needed by/);
                $line =~ s/^\s+(\S+)\s+is needed by .*$/$1/;
                push @failed_deps, $line;
            }
            $msg = sprintf("Installing this package requires the following:  %s", join(" ", @failed_deps));
            last;
        } elsif ($line =~ /^Architecture is not included:/) {
            $err = PKGTOOL_ARCH_MISMATCH;
            $line =~ s/^Architecture is not included:\s+//;
            $msg = "This package does not install on the $line architecture";
        }
    }
    close(RPM);
    dprint "\"$cmd\" returned $?\n";
    if ($? != 0 && $err == PKGTOOL_SUCCESS) {
        return PKGTOOL_UNSPECIFIED_ERROR;
    }
    if ($err == PKGTOOL_SUCCESS) {
        print "$pkg_file successfully installed.\n";
    } else {
        eprint "$msg\n";
    }
    return $err;
}

sub
deb_install
{
    my $pkg_file = $_[0];
    my ($dpkg, $cmd);
    my @inp;
    local *DPKG;

    $dpkg = ($pkg_prog ? $pkg_prog : "dpkg");
    $cmd = "$dpkg -x $pkg_file";
    dprint "About to run \"$cmd\"\n";
    if (!open(DPKG, "$cmd 2>&1 |")) {
        eprint "Execution of \"$cmd\" failed -- $!\n";
    }
    while (<DPKG>) {
        print;
    }
    close(DPKG);
    dprint "\"$cmd\" returned $?\n";
    if ($? != 0) {
        return PKGTOOL_UNSPECIFIED_ERROR;
    }
    print "$pkg_file successfully installed.\n";
    return PKGTOOL_SUCCESS;
}

sub
rpm_show_contents
{
    my $pkg_file = $_[0];
    my ($rpm, $cmd, $rc);
    local *RPM;

    $rpm = ($pkg_prog ? $pkg_prog : "rpm");
    $rc = ($rcfile ? "--rcfile '/usr/lib/rpm/rpmrc:$rcfile'" : "");
    $cmd = "$rpm $rc -ql " . ($pkg_file ? "-p $pkg_file" : "");
    dprint "About to run \"$cmd\"\n";
    if (!open(RPM, "$cmd 2>&1 |")) {
        eprint "Execution of \"$cmd\" failed -- $!\n";
    }
    while (<RPM>) {
        print;
    }
    close(RPM);
    dprint "\"$cmd\" returned $?\n";
    if ($? != 0) {
        return PKGTOOL_UNSPECIFIED_ERROR;
    }
    return PKGTOOL_SUCCESS;
}

sub
deb_show_contents
{
    my $pkg_file = $_[0];
    my ($dpkg, $cmd);
    my @inp;
    local *DPKG;

    $dpkg = ($pkg_prog ? $pkg_prog : "dpkg");
    $cmd = "$dpkg -c " . ($pkg_file ? "-p $pkg_file" : "");
    dprint "About to run \"$cmd\"\n";
    if (!open(DPKG, "$cmd 2>&1 |")) {
        eprint "Execution of \"$cmd\" failed -- $!\n";
    }
    while (<DPKG>) {
        chomp;
        @inp = split /\s+/;
        print "$inp[8]\n";
    }
    close(DPKG);
    dprint "\"$cmd\" returned $?\n";
    if ($? != 0) {
        return PKGTOOL_UNSPECIFIED_ERROR;
    }
    return PKGTOOL_SUCCESS;
}

sub
rpm_build
{
    my ($cmd, $rpm, $line);
    my ($err, $msg) = (0, 0);
    my (@failed_deps, @not_found, @spec_errors, @out_files);
    local *RPM;

    $rpm = ($pkg_prog ? $pkg_prog : "rpm") . ($rcfile ? " --rcfile '/usr/lib/rpm/rpmrc:$rcfile'" : "");
    if ($rootdir) {
        $rpm .= " --buildroot=\"$rootdir\"";
    }
    if ($_[0] =~ /src\.rpm$/) {
        $cmd = "$rpm" . ($rcfile ? " --rcfile \"$rcfile\"" : "") . " --rebuild $_[0]";
    } else {
        $cmd = "$rpm" . ($rcfile ? " --rcfile \"$rcfile\"" : "") . " -ba $_[0]";
    }
    dprint "About to run \"$cmd\"\n";
    if (!open(RPM, "$cmd </dev/null 2>&1 |")) {
        eprint "Execution of \"$cmd\" failed -- $!\n";
        return PKGTOOL_COMMAND_FAILED;
    }
    $err = PKGTOOL_SUCCESS;
    while (<RPM>) {
        chomp($line = $_);
        print "$line\n";
        if ($line =~ /^Wrote:\s+(\S+\.\w+\.rpm)$/) {
            push @out_files, $1;
        } elsif ($line =~ /^line \d+: [^:]+: /
                 || $line =~ /^Failed to find \w+:/
                 || $line =~ /^Symlink points to BuildRoot: /) {
            $err = PKGTOOL_SPEC_ERRORS;
            push @spec_errors, $line;
        } elsif ($line =~ /^Bad exit status from/) {
            $err = PKGTOOL_BUILD_FAILURE;
            $line =~ s/^Bad exit status from \S+ \((%\w+)\)/$1/;
            $msg = "The RPM $line stage exited abnormally";
        } elsif ($line =~ /^error: failed build dependencies:/) {
            $err = PKGTOOL_DEPENDENCIES;
            while (<RPM>) {
                chomp($line = $_);
                last if ($line !~ /is needed by/);
                $line =~ s/^\s+(\S+)\s+is needed by .*$/$1/;
                push @failed_deps, $line;
            }
            $msg = sprintf("Building this package requires the following:  %s", join(" ", @failed_deps));
            last;
        } elsif ($line =~ /^Architecture is not included:/) {
            $err = PKGTOOL_ARCH_MISMATCH;
            $line =~ s/^Architecture is not included:\s+//;
            $msg = "This package does not build on the $line architecture";
        } elsif ($line =~ /^File (.*): No such file or directory$/
                 || $line =~ /^Bad file: (.*): No such file or directory$/
                 || $line =~ /^File is not a regular file: (.*)$/
                 || $line =~ /^Unable to open icon (\S+):$/
                 || $line =~ /^No (patch number \d+)$/
                 || $line =~ /^Could not open \%files file (\S+): No such file or directory$/
                 || $line =~ /^File not found(?: by glob)?: (.*)$/) {
            $err = PKGTOOL_MISSING_FILES;
            push @not_found, $1;
        }
    }
    close(RPM);
    dprint "\"$cmd\" returned $?\n";
    if ($? != 0 && $err == PKGTOOL_SUCCESS) {
        $err = PKGTOOL_UNSPECIFIED_ERROR;
        $msg = "Unhandled package build error";
    } elsif ($#not_found != -1) {
        $msg = sprintf("The following were expected by the build, but no matching files were found:  \"%s\"",
                       join("\", \"", @not_found));
    } elsif ($#spec_errors != -1) {
        $msg = sprintf("The spec file contains the following errors:  \"%s\"", join("\", \"", @spec_errors));
    }

    if ($msg) {
        eprint "$msg\n";
    }
    if ($#out_files >= 0) {
        print "Package files generated:  ", join(" ", @out_files), "\n";
    }
    return $err;
}

sub
deb_build
{

}

sub
rpm_generate_source_files
{
    my ($specfile, $module, $srcs, $head_tag, $release_tag) = @_;
    my ($err, $msg, $src_files, $tarball, $modname, $tag_prefix, $prev_tag);
    my (@contents, @tags, @srcs, @all_srcs);
    local (*DIR, *CMD);

    if ($module && (!chdir($module))) {
        return PKGTOOL_BAD_MODULE;
    }
    if (-f "CVS/Repository") {
        chomp($modname = &cat_file("CVS/Repository"));
    } elsif ($module) {
        ($modname = $module) =~ s/^.*\/([^\/]+)$/$1/;
    } else {
        return PKGTOOL_BAD_MODULE;
    }
    if ($destdir && $destdir !~ /\/$/) {
        $destdir .= "/";
    }
    opendir(DIR, ".");
    @contents = readdir(DIR);
    closedir(DIR);

    &parse_spec_file($specfile) if ($specfile);

    if (! $release_tag) {
        ($release_tag = "$define{PACKAGE_NAME}-$define{PACKAGE_VERSION}") =~ tr/[a-z]/[A-Z]/;
        $release_tag =~ s/[^-A-Z0-9]/-/g;
    }
    $tag_prefix = $release_tag;

    if ($srcs) {
        @srcs = split(/[\s,]/, $srcs);
    } else {
        my $fname;

        foreach $fname (@contents) {
            next if (&should_ignore($fname));
            if (-d $fname) {
                push @srcs, "$fname:$fname.tar.gz";
            } else {
                push @srcs, $fname;
            }
        }
    }

    dprint "Preparing to generate sources \"", join(" ", @srcs), "\".\n";
    dprint "Sources:  ", join(", ", @sources), "\n";
    dprint "Patches:  ", join(", ", @patches), "\n";

    if ($#patches >= 0) {
        @tags = grep($tag_type{$_} eq "revision", &get_tag_list($tagfile));
        if ($release_tag || $head_tag) {
            my @real_tags;
            my $keep = ($release_tag ? 0 : 1);

            foreach $tag (@tags) {
                if ($tag eq $release_tag) {
                    $keep = 1;
                } elsif ($tag eq $head_tag) {
                    $keep = 0;
                }
                push @real_tags, $tag if ($keep);
            }
            @tags = @real_tags;
        }
        dprint "Real Tags:  ", join(" ", @tags), "\n";
        for ($i = 1; $i <= $#tags; $i++) {
            if ($tags[$i] =~ /^$tag_prefix-PATCH-(\d+)$/) {
                my $num = $1;

                if (!defined($patch{$num})) {
                    print "$progname:  Warning:  Patch $num exists as a tag but is not referenced in the spec file.\n";
                    next;
                }
                $last_tag{$patch{$num}} = $tags[$i - 1];
                dprint "Previous tag for patch $num ($patch{$num}) is $last_tag{$patch{$num}}\n";
            } elsif ($tags[$i] =~ /^$tag_prefix-SOURCE-(\d+)$/) {
                my $num = $1;

                if (!defined($source{$num})) {
                    print "$progname:  Warning:  Source $num exists as a tag but is not referenced in the spec file.\n";
                    next;
                }
                $last_tag{$source{$num}} = $tags[$i - 1];
                dprint "Previous tag for source $num ($source{$num}) is $last_tag{$source{$num}}\n";
            } elsif ($tags[$i] =~ /^(.*)-(SOURCE|PATCH)-\d+$/) {
                my $tmp = $1;
                my @tmp;

                # It's trying to be a valid tag.  Maybe we can help it along.
                @tmp = grep($_ =~ /^$tmp/, @tags);
                if ($#tmp > ($#tags / 2)) {
                    # More than half of the tags start with this.  Somebody screwed up.  Let's help.
                    $tag_prefix = $tmp;
                    print "$progname:  Warning:  Incorrect tag prefix detected.  Using $tag_prefix instead of $release_tag.\n";
                    $i = 0;
                }
            }                
        }
        #($err, $msg) = &fetch_package("revtool -gt $release_tag $modname");
        #if ($err) {
        #    eprint "Unable to obtain $modname using release tag $release_tag -- $msg\n";
        #    return PKGTOOL_BAD_MODULE;
        #}
        #chdir($modname);

        #opendir(DIR, ".");
        #@contents = readdir(DIR);
        #closedir(DIR);

        # Generate all the source files that already exist
        &update_to_tag($release_tag) if ($release_tag);
        foreach $src (@srcs) {
            my @tmp;

            ($src_files, $tarball) = split(":", $src);
            @tmp = split(/[\&\s]+/, $src_files);
            @all_srcs = (@all_srcs, @tmp);
            @tmp = grep(-e $_, @tmp);
            next if ($#tmp < 0);
            dprint "\@tmp contains $#tmp + 1 elements:  ", join(" ", @tmp), "\n";
            $src_files = join(" ", @tmp);
            $err = &create_source_file($src_files, $tarball, $destdir, $tar, $zip);
            if ($err) {
                return $err;
            }
            foreach $num (@sources) {
                if (($tarball && $source{$num} =~ /$tarball$/)
                    || (! $tarball && $src_files =~ /^(.*\s+)?$source{$num}(\s+.*)?$/)) {
                    dprint "Undefining source $num\n";
                    delete $source{$num};
                }
            }
            @sources = sort {$a <=> $b} keys %source;
        }

        # Clean the checkout we did.
        #chdir("..");
        #&nuke_tree($modname) if (-d $modname);

        # At this point, we've generated all the source files which are initially available
        # in the original import of the module.  Now update to generate other sources.

        $src_files = join(" ", @all_srcs);  # For generating diffs

        $prev_tag = "";
        foreach $num (@sources) {
            my $source = $source{$num};
            my ($tag, $files);
            my @new_files;

            dprint "Generating source $num ($source)\n";
            $tag = "$tag_prefix-SOURCE-$num";
            if (!defined $last_tag{$source{$num}}) {
                eprint "No tag exists for $source ($tag).  I'll create an empty file for it, but this may cause problems.\n";
                &touch_file("$destdir$source");
                next;
            }
            &update_to_tag($last_tag{$source{$num}}) if ($prev_tag ne $last_tag{$source{$num}});
            @new_files = &update_to_tag($tag);
            @new_files = grep(! &should_ignore($_), @new_files);
            $prev_tag = $tag;
            next if ($#new_files < 0);
            $files = join(" ", @new_files);
            $err = &create_source_file($files, ($source =~ /\.tar(\.[A-Za-z0-9]+)?$/ ? $source : 0), $destdir, $tar, $zip);
            if ($err) {
                return $err;
            }
        }

        # For patches, diff between the two tags to generate the patch files.
        foreach $num (@patches) {
            my $patch = $patch{$num};
            my $tag;

            dprint "Generating diff for patch $num ($patch)\n";
            $tag = "$tag_prefix-PATCH-$num";
            if (!defined $last_tag{$patch{$num}}) {
                eprint "No tag exists for $patch{$num} ($tag).  I'll create an empty file for it, but this may cause problems.\n";
                &touch_file("$destdir$patch{$num}");
                next;
            }
            $err = &gen_diff($modname, $src_files, $last_tag{$patch{$num}}, $tag, "$destdir$patch{$num}");
            if ($err) {
                return $err;
            }
        }
        &update_to_tag($head_tag ? $head_tag : "");
    } else {
        # Just sources.  Do it like we always have.
        foreach $src (@srcs) {
            ($src_files, $tarball) = split(":", $src);
            $src_files =~ s/\&/ /g;
            $err = &create_source_file($src_files, $tarball, $destdir, $tar, $zip);
            if ($err) {
                return $err;
            }
        }
    }
    return PKGTOOL_SUCCESS;
}

# main() here is basically the same as main() in C
sub
main
{
    my $ret;

    # Set up the basic variables
    $progname = "pkgtool";
    $version = "1.0";

    # See the Getopt::Long man page for details on the syntax of this line
    @valid_opts = ("h|help", "v|version", "d|debug", "b|build", "i|install", "c|contents",
                   "g|generate", "o|sources:s", "p|package=s", "s|specfile|scripts=s", "m|module=s",
                   "r|release-tag=s", "t|head-tag=s", "P|program=s", "R|rcfile=s", "tar=s", "zip=s",
                   "tagfile=s", "D|destdir=s", "root=s");
    Getopt::Long::Configure("no_getopt_compat", "bundling", "no_ignore_case");
    Getopt::Long::GetOptions(@valid_opts);

    # Post-parse the options stuff
    select STDOUT; $| = 1;
    if ($opt_v) {
        # Do not edit this variable.  It is updated automatically by CVS when you commit
        my $rcs_info = 'CVS Revision $Revision: 1.15 $ created on $Date: 2000/07/12 03:51:59 $ by $Author: mej $ ';

        $rcs_info =~ s/\$\s*Revision: (\S+) \$/$1/;
        $rcs_info =~ s/\$\s*Date: (\S+) (\S+) \$/$1 at $2/;
        $rcs_info =~ s/\$\s*Author: (\S+) \$ /$1/;
        print "\n";
	print "$progname $version by Michael Jennings <mej\@eterm.org>\n";
        print "Copyright (c) 2000, Michael Jennings and VA Linux Systems, Inc.\n";
        print "  ($rcs_info)\n";
        print "\n";
	return PKGTOOL_SUCCESS;
    } elsif ($opt_h) {
	&print_usage_info();   # Never returns
        # This is a really silly way to shut up the "used only once" warnings.
        $opt_h = $opt_v = $opt_b = $opt_c = $opt_i = $opt_g = 0;
    }

    if ($opt_b) {
        $mode = "build";
    } elsif ($opt_i) {
        $mode = "install";
    } elsif ($opt_c) {
        $mode = "contents";
    } elsif ($opt_g) {
        $mode = "generate";
    } else {
        &fatal_error("Nothing to do!\n");
    }

    $debug = ($opt_d ? $opt_d : 0);
    $srcs = ($opt_o ? $opt_o : 0);
    $pkg_file = ($opt_p ? $opt_p : 0);
    $pkg_prog = ($opt_P ? $opt_P : 0);
    $specfile = $script_dir = ($opt_s ? $opt_s : 0);
    $module = ($opt_m ? $opt_m : 0);
    $release_tag = ($opt_r ? $opt_r : 0);
    $head_tag = ($opt_t ? $opt_t : 0);
    $rcfile = ($opt_R ? $opt_R : 0);
    $tar = ($opt_tar ? $opt_tar : 0);
    $zip = ($opt_zip ? $opt_zip : 0);
    $tagfile = ($opt_tagfile ? $opt_tagfile : ($specfile ? $specfile : 0));
    $destdir = ($opt_D ? $opt_D : "");
    $rootdir = ($opt_root ? $opt_root : "");

    # Signal handling
    $SIG{HUP} = 'IGNORE';
    $SIG{INT} = \&handle_signal;
    $SIG{TERM} = \&handle_signal;
    $SIG{QUIT} = \&handle_fatal_signal;
    $SIG{ILL} = \&handle_fatal_signal;
    $SIG{ABRT} = \&handle_fatal_signal;
    $SIG{FPE} = \&handle_fatal_signal;
    $SIG{SEGV} = \&handle_fatal_signal;
    $SIG{BUS} = \&handle_fatal_signal;
    $SIG{TSTP} = \&handle_fatal_signal;
    $SIG{TTIN} = \&handle_fatal_signal;
    $SIG{TTOU} = \&handle_fatal_signal;
    $SIG{__WARN__} = \&handle_warning;

    if ($specfile) {
        if ((-f $specfile || -f "$module/$specfile") && -s _) {
            $type = "rpm";
        } elsif (-d $script_dir) {
            $type = "deb";
        } else {
            eprint "You must specify a valid spec file or script directory with -s\n";
            return PKGTOOL_SYNTAX_ERROR;
        }
    }
    if ($#ARGV >= 0) {
        if (! $specfile) {
            # If they didn't give us a spec file, find one on the command line
            ($specfile) = grep(/\.spec(\.in)?$/, @ARGV);
            if ($specfile) {
                @ARGV = grep($_ !~ /\.spec(\.in)?$/, @ARGV);
            }
        }
        if (! $pkg_file) {
            # If it looks like a package, assume it is one
            $pkg_file = join(" ", grep(/\.(rpm|deb|gz)$/, @ARGV));
            if ($pkg_file) {
                @ARGV = grep($_ !~ /\.(rpm|deb|gz)$/, @ARGV);
            }
        }
    }
    if ($pkg_file) {
        if ($pkg_file =~ /\.(deb|gz)$/) {
            $type = "deb";
        } elsif ($pkg_file =~ /\.rpm$/) {
            $type = "rpm";
        }
        dprint "Package type is $type\n";
    }

    if ($mode eq "build") {
        if ($type eq "rpm") {
            # FIXME:  Maybe I should detect if source file generation is needed here?
            if ($specfile) {
                $ret = &rpm_build($specfile);
            } elsif ($pkg_file && $pkg_file =~ /src\.rpm$/) {
                $ret = &rpm_build($pkg_file);
            }
        } elsif ($type eq "deb") {
            $ret = &deb_build();
        }
    } elsif ($mode eq "install") {
        if (! $pkg_file) {
            eprint "You cannot perform an install without specifying a package.\n";
            return PKGTOOL_SYNTAX_ERROR;
        }
        if ($type eq "rpm") {
            $ret = &rpm_install($pkg_file);
        } elsif ($type eq "deb") {
            $ret = &deb_install($pkg_file);
        }
    } elsif ($mode eq "contents") {
        if ($type eq "rpm") {
            $ret = &rpm_show_contents($pkg_file);
        } elsif ($type eq "deb") {
            $ret = &deb_show_contents($pkg_file);
        }
    } elsif ($mode eq "generate") {
        if (! $specfile) {
            eprint "Please specify a spec file/script directory\n";
            return PKGTOOL_SYNTAX_ERROR;
        }
        if ($type eq "rpm") {
            $ret = &rpm_generate_source_files($specfile, $module, $srcs, $head_tag, $release_tag);
        } elsif ($type eq "deb") {
        }
    }

    return $ret;
}

exit &main();
