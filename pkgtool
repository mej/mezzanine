#!/usr/bin/perl -w
#
# pkgtool -- Tool for generating source/patch files from a source code repository
# 
# Copyright (C) 2000, Michael Jennings
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to
# deal in the Software without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
# sell copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies of the Software, its documentation and marketing & publicity
# materials, and acknowledgment shall be given in the documentation, materials
# and software packages that this Software was used.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
# IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
# $Id: pkgtool,v 1.6 2000/06/28 23:14:40 mej Exp $
#

# Include the Perl Modules we need
use POSIX;
use Getopt::Long;

# Constants
#
# Keep these in sync with the ones in revtool, or
# talk perl into using headers and #define's.
#
# 1-20 are generic errors
sub REVTOOL_NO_SERVER()           {1;}
sub REVTOOL_SERVER_CRASH()        {2;}
sub REVTOOL_BAD_LOGIN()           {3;}
sub REVTOOL_COMMAND_FAILED()      {4;}
sub REVTOOL_ACCESS_DENIED()       {5;}
sub REVTOOL_NO_SOURCES()          {6;}

# 21-40 are retrieval/update errors
sub REVTOOL_FILE_NOT_FOUND()      {21;}
sub REVTOOL_FILE_REMOVED()        {22;}
sub REVTOOL_CONFLICT_FOUND()      {23;}
sub REVTOOL_INVALID_TAG()         {24;}

# 41-60 are add/remove errors
sub REVTOOL_BAD_ADDITION()        {41;}
sub REVTOOL_BAD_REMOVAL()         {42;}

# 61-80 are commit errors
sub REVTOOL_NEED_UPDATE()         {61;}

# 127 is a catch-all
sub REVTOOL_UNSPECIFIED_ERROR()   {127;}


# Return codes for pkgtool
sub PKGTOOL_SUCCESS()           {0;}
sub PKGTOOL_FATAL_ERROR()       {1;}
sub PKGTOOL_SYNTAX_ERROR()      {2;}
sub PKGTOOL_COMMAND_FAILED()    {3;}

sub PKGTOOL_MISSING_FILES()     {10;}
sub PKGTOOL_SPEC_ERRORS()       {11;}
sub PKGTOOL_DEPENDENCIES()      {12;}
sub PKGTOOL_ARCH_MISMATCH()     {13;}
sub PKGTOOL_BUILD_FAILURE()     {14;}

sub PKGTOOL_TERMINATED()        {50;}
sub PKGTOOL_CRASHED()           {60;}
sub PKGTOOL_UNSPECIFIED_ERROR   {127;}

# Print usage information
sub
print_usage_info
{
    print "\n";
    $leader = "$progname $version Usage Information";
    $underbar = $leader;
    $underbar =~ s/./-/g;
    print "$leader\n$underbar\n";
    print "\n";
    print "  Syntax:   pkgtool [ options ]\n";
    print "\n";
    print "    -h --help                        Show this usage information\n";
    print "    -d --debug                       Turn on debugging\n";
    print "    -v --version                     Show version and copyright\n";
    print "    -b --build                       Build a package\n";
    print "    -i --install                     Install (unarchive) a package\n";
    print "    -c --contents                    Check the contents of a package\n";
    print "    -o --sources [srcs]              Specify the sources to generate\n";
    print "    -p --package <file>              Specify the package filename\n";
    print "    -s --specfile --scripts <path>   Specify the spec file (or debian script directory) to use\n";
    print "    -m --module <name>               Specify the module name\n";
    print "    -r --release-tag <tag>           Operate on the revisions starting at <tag>\n";
    print "    -t --head-tag <tag>              Operate on the revisions up to and including <tag>\n";
    print "    -P --program <cmd>               Specify the package management program to be used\n";
    print "    -R --rcfile <rcfile>             Specify an alternate rpmrc file\n";
    print "    -D --dir <directory>             Specify \"directory\" as the full path to the module\n";
    print "    -l --log <logfile>               Specify a log file to send informational output to\n";
    print "\n";
    exit(PKGTOOL_SUCCESS);
}

# Generate timestamp for debugging/log file
sub
get_timestamp
{
    $ts = POSIX::strftime("%A, %d %B %Y %H:%M:%S %Z", localtime);
    return $ts;
}

# Report a fatal error
sub
fatal_error
{
    my $msg = "$progname:  FATAL:  $_[0]";

    print STDERR $msg;
    exit(PKGTOOL_FATAL_ERROR);
}

# Debugging output
sub
dprintf
{
    return if (! $debug);
    print "[debug:$progname] " if (! $slave);
    printf @_ if (! $slave);
}
sub
dprint
{
    return if (! $debug);
    if (! $slave) {
        print "[debug:$progname] ", @_;
    }
}

# Print an error
sub
eprintf
{
    print "$progname:  Error:  ";
    printf @_;
}
sub
eprint
{
    print "$progname:  Error:  ", @_;
}

# Handle a terminate signal
sub
handle_signal
{
    my $sig = $_[0];

    &summarize_failures() if ($#failed_pkgs >= 0);
    eprint "Someone sent me a SIG$sig asking me to exit, so I shall.\n";
    close($GLOBAL_LOG) if ($GLOBAL_LOG);
    exit PKGTOOL_TERMINATED;
}

# Handle a fatal signal
sub
handle_fatal_signal
{
    my $sig = $_[0];

    eprint "Caught fatal signal SIG$sig.  Cleaning up and aborting...\n";
    close($GLOBAL_LOG) if ($GLOBAL_LOG);
    exit PKGTOOL_CRASHED;
}

# Handle a perl warning
sub
handle_warning
{
    dprint @_;
}

# Add a %define
sub
add_define
{
    my ($var, $value) = @_;

    $define{$var} = $value;
    dprint "Added \%define:  $var -> $define{$var}\n";
}

# Replace %define's in a spec file line with their values
sub
replace_defines
{
    my $line = $_[0];

    while ($line =~ /\%(\w+)/g) {
        my $var = $1;

        if (defined $define{$var}) {
            $line =~ s/\%$var/$define{$var}/g;
            reset;
        }
    }
    while ($line =~ /\%\{([^\}]+)\}/g) {
        my $var = $1;

        if (defined $define{$var}) {
            $line =~ s/\%\{$var\}/$define{$var}/g;
            reset;
        }
    }
    return $line;
}

# Parse spec file
sub
parse_spec_file
{
    my $specfile = $_[0];
    my ($line, $oldline, $stage, $pkg);
    local *SPECFILE;

    if (! $specfile) {
        # Look in the specified module
    }

    open(SPECFILE, $specfile) || &fatal_error("Unable to open $specfile -- $!");
    $stage = 0;
    while (<SPECFILE>) {
        chomp($line = $_);
        next if ($line =~ /^\s*\#/ || $line =~ /^\s*$/);
        $oldline = $line;
        $line = &replace_defines($oldline);
        if ($oldline ne $line) {
            dprint "Parsing from $specfile, line $.: \"$oldline\" -> \"$line\"\n";
        } else {
            dprint "Parsing from $specfile, line $.: \"$line\"\n";
        }
        if ($line =~ /^\%(prep|build|install|clean|changelog|trigger|triggerpostun|triggerun|triggerin|verifyscript)\s*$/
            || $line =~ /^\%(package|preun|pre|postun|post|files|description)(\s+\w+)?$/) {
            my $param = $2;

            $stage = $1;
            dprint "Switching to stage \"$stage\"\n";
            if ($stage eq "package" && $param) {
                $pkg = "$packages[0]-$param";
                push @packages, $pkg;
            }
        } elsif ((! $stage) && $line =~ /^\s*(\w+)\s*:\s*(.*)$/) {
            my ($var, $value) = ($1, $2);

            $var =~ tr/[A-Z]/[a-z]/;
            if ($var eq "name") {
                $pkg = $value;
                @packages = ($pkg);
                &add_define("PACKAGE_NAME", $value);
            } elsif ($var =~ /^source(\d*)$/) {
                my $key = ($1 ? $1 : "0");

                $value =~ s/^.*\/([^\/]+)$/$1/;
                $source{$key} = $value;
                &add_define("SOURCE$key", $value);
            } elsif ($var =~ /^patch(\d*)$/) {
                my $key = ($1 ? $1 : "0");

                $value =~ s/^.*\/([^\/]+)$/$1/;
                $patch{$key} = $value;
                &add_define("PATCH$key", $value);
            } else {
                $header{$var} = $value;
                if ($var eq "version") {
                    &add_define("PACKAGE_VERSION", $value);
                } elsif ($var eq "release") {
                    &add_define("PACKAGE_RELEASE", $value);
                }
            }
        } elsif ($line =~ /^%\s*define\s*(\w+)\s*(.*)$/) {
            &add_define($1, $2);
        }
    }
    close(SPECFILE);

    if ($debug) {
        dprint "Got the following sources:\n";
        foreach $src (sort {$a <=> $b} keys %source) {
            dprint "    Source $src -> $source{$src}\n";
        }
        dprint "Got the following patches:\n";
        foreach $p (sort {$a <=> $b} keys %patch) {
            dprint "    Patch $p -> $patch{$p}\n";
        }
        dprint "Got the following header info:\n";
        foreach $h (sort {uc($a) cmp uc($b)} keys %header) {
            dprint "    $h -> $header{$h}\n";
        }
    }
}

sub
rpm_install
{
    my $pkg_file = $_[0];
    my ($rpm, $cmd, $rc, $err, $msg);
    my (@failed_deps);
    local *RPM;

    $rpm = ($pkg_prog ? $pkg_prog : "rpm");
    $rc = ($rcfile ? "--rcfile '/usr/lib/rpm/rpmrc:$rcfile'" : "");
    $cmd = "$rpm $rc -U $pkg_file";
    dprint "About to run \"$cmd\"\n";
    if (!open(RPM, "$cmd 2>&1 |")) {
        eprint "Execution of \"$cmd\" failed -- $!\n";
    }
    $err = PKGTOOL_SUCCESS;
    while (<RPM>) {
        chomp($line = $_);
        print "$line\n";
        if ($line =~ /^error: failed build dependencies:/) {
            $err = PKGTOOL_DEPENDENCIES;
            while (<RPM>) {
                chomp($line = $_);
                last if ($line !~ /is needed by/);
                $line =~ s/^\s+(\S+)\s+is needed by .*$/$1/;
                push @failed_deps, $line;
            }
            $msg = sprintf("Installing this package requires the following:  %s", join(" ", @failed_deps));
            last;
        } elsif ($line =~ /^Architecture is not included:/) {
            $err = PKGTOOL_ARCH_MISMATCH;
            $line =~ s/^Architecture is not included:\s+//;
            $msg = "This package does not install on the $line architecture";
        }
    }
    close(RPM);
    dprint "\"$cmd\" returned $?\n";
    if ($? != 0 && $err == PKGTOOL_SUCCESS) {
        return PKGTOOL_UNSPECIFIED_ERROR;
    }
    if ($err == PKGTOOL_SUCCESS) {
        print "$pkg_file successfully installed.\n";
    } else {
        eprint "$msg\n";
    }
    return $err;
}

sub
deb_install
{
    my $pkg_file = $_[0];
    my ($dpkg, $cmd);
    my @inp;
    local *DPKG;

    $dpkg = ($pkg_prog ? $pkg_prog : "dpkg");
    $cmd = "$dpkg -x $pkg_file";
    dprint "About to run \"$cmd\"\n";
    if (!open(DPKG, "$cmd 2>&1 |")) {
        eprint "Execution of \"$cmd\" failed -- $!\n";
    }
    while (<DPKG>) {
        print;
    }
    close(DPKG);
    dprint "\"$cmd\" returned $?\n";
    if ($? != 0) {
        return PKGTOOL_UNSPECIFIED_ERROR;
    }
    print "$pkg_file successfully installed.\n";
    return PKGTOOL_SUCCESS;
}

sub
rpm_show_contents
{
    my $pkg_file = $_[0];
    my ($rpm, $cmd, $rc);
    local *RPM;

    $rpm = ($pkg_prog ? $pkg_prog : "rpm");
    $rc = ($rcfile ? "--rcfile '/usr/lib/rpm/rpmrc:$rcfile'" : "");
    $cmd = "$rpm $rc -ql " . ($pkg_file ? "-p $pkg_file" : "");
    dprint "About to run \"$cmd\"\n";
    if (!open(RPM, "$cmd 2>&1 |")) {
        eprint "Execution of \"$cmd\" failed -- $!\n";
    }
    while (<RPM>) {
        print;
    }
    close(RPM);
    dprint "\"$cmd\" returned $?\n";
    if ($? != 0) {
        return PKGTOOL_UNSPECIFIED_ERROR;
    }
    return PKGTOOL_SUCCESS;
}

sub
deb_show_contents
{
    my $pkg_file = $_[0];
    my ($dpkg, $cmd);
    my @inp;
    local *DPKG;

    $dpkg = ($pkg_prog ? $pkg_prog : "dpkg");
    $cmd = "$dpkg -c " . ($pkg_file ? "-p $pkg_file" : "");
    dprint "About to run \"$cmd\"\n";
    if (!open(DPKG, "$cmd 2>&1 |")) {
        eprint "Execution of \"$cmd\" failed -- $!\n";
    }
    while (<DPKG>) {
        chomp;
        @inp = split /\s+/;
        print "$inp[8]\n";
    }
    close(DPKG);
    dprint "\"$cmd\" returned $?\n";
    if ($? != 0) {
        return PKGTOOL_UNSPECIFIED_ERROR;
    }
    return PKGTOOL_SUCCESS;
}

sub
rpm_build
{
    my ($cmd, $rpm, $line);
    my ($err, $msg) = (0, 0);
    my (@failed_deps, @not_found, @spec_errors, @out_files);
    local *RPM;

    $rpm = ($pkg_prog ? $pkg_prog : "rpm") . ($rcfile ? " --rcfile '/usr/lib/rpm/rpmrc:$rcfile'" : "");
    if ($_[0] =~ /src\.rpm$/) {
        $cmd = "$rpm --rcfile \"/usr/lib/rpm/rpmrc:$rpmrc\" --rebuild $_[0]";
    } else {
        $cmd = "$rpm --rcfile \"/usr/lib/rpm/rpmrc:$rpmrc\" -ba $_[0]";
    }
    dprint "About to run \"$cmd\"\n";
    if (!open(RPM, "$cmd </dev/null 2>&1 |")) {
        eprint "Execution of \"$cmd\" failed -- $!\n";
        return PKGTOOL_COMMAND_FAILED;
    }
    $err = PKGTOOL_SUCCESS;
    while (<RPM>) {
        chomp($line = $_);
        print "$line\n";
        if ($line =~ /^Wrote:\s+(\S+\.\w+\.rpm)$/) {
            push @out_files, $1;
        } elsif ($line =~ /^line \d+: [^:]+: /
                 || $line =~ /^Failed to find \w+:/
                 || $line =~ /^Symlink points to BuildRoot: /) {
            $err = PKGTOOL_SPEC_ERRORS;
            push @spec_errors, $line;
        } elsif ($line =~ /^Bad exit status from/) {
            $err = PKGTOOL_BUILD_FAILURE;
            $line =~ s/^Bad exit status from \S+ \((%\w+)\)/$1/;
            $msg = "The RPM $line stage exited abnormally";
        } elsif ($line =~ /^error: failed build dependencies:/) {
            $err = PKGTOOL_DEPENDENCIES;
            while (<RPM>) {
                chomp($line = $_);
                last if ($line !~ /is needed by/);
                $line =~ s/^\s+(\S+)\s+is needed by .*$/$1/;
                push @failed_deps, $line;
            }
            $msg = sprintf("Building this package requires the following:  %s", join(" ", @failed_deps));
            last;
        } elsif ($line =~ /^Architecture is not included:/) {
            $err = PKGTOOL_ARCH_MISMATCH;
            $line =~ s/^Architecture is not included:\s+//;
            $msg = "This package does not build on the $line architecture";
        } elsif ($line =~ /^File (.*): No such file or directory$/
                 || $line =~ /^Bad file: (.*): No such file or directory$/
                 || $line =~ /^File is not a regular file: (.*)$/
                 || $line =~ /^Unable to open icon (\S+):$/
                 || $line =~ /^No (patch number \d+)$/
                 || $line =~ /^Could not open \%files file (\S+): No such file or directory$/
                 || $line =~ /^File not found(?: by glob)?: (.*)$/) {
            $err = PKGTOOL_MISSING_FILES;
            push @not_found, $1;
        }
    }
    close(RPM);
    dprint "\"$cmd\" returned $?\n";
    if ($? != 0 && $err == PKGTOOL_SUCCESS) {
        $err = PKGTOOL_UNSPECIFIED_ERROR;
        $msg = "Unhandled package build error";
    } elsif ($#not_found != -1) {
        $msg = sprintf("The following were expected by the build, but no matching files were found:  \"%s\"",
                       join("\", \"", @not_found));
    } elsif ($#spec_errors != -1) {
        $msg = sprintf("The spec file contains the following errors:  \"%s\"", join("\", \"", @spec_errors));
    }

    if ($msg) {
        eprint "$msg\n";
    }
    if ($#out_files >= 0) {
        print "Package files generated:  ", join(" ", @out_files), "\n";
    }
    return $err;
}

sub
deb_build
{

}

sub
do_compose_stage
{
    my ($specfile, $target, $pn, $dir, $line, $src, $tarball, $cwd);
    my ($err, $msg, $srpm) = (0, 0, 0);
    my (@contents, @tmp, @dirs, @sfiles, @srcs);
    my @p;
    local *DIR;
    local *CMD;

    if ($#_ >= 0) {
        @p = @_;
    } else {
        @p = @packages;
    }

    print "$progname:  Entering the compose stage.  (${\(&get_timestamp())})\n";
    chomp($cwd = `pwd`);

    # No compose stage for package files since they're *already* package files....
    foreach $pkg (grep $pkgs->{$_}{TYPE} eq "module", @p) {
        if ($pkgs->{$pkg}{STAGES} !~ /c/) {
            print "$progname:  Skipping compose stage for the \"$pkg\" package.\n";
            next;
        }
        print "$progname:  Starting compose stage for the \"$pkg\" package....  (${\(&get_timestamp())})\n";

        # The first step is to examine the module directory to find
        # the names of the vendor source files/directories and the spec file.
        if (! chdir("$cwd/$pkgs->{$pkg}{MODULE}")) {
            &fail_package($pkg, "compose", "Could not chdir into $cwd/$pkgs->{$pkg}{MODULE} -- $!");
            next;
        }
        opendir(DIR, ".");
        @contents = readdir(DIR);
        closedir(DIR);
        @tmp = grep($_ =~ /src\.rpm$/, @contents);
        if ($#tmp >= 0) {
            $srpm = $tmp[0];
            if ($#tmp > 0) {
                print "$progname:  Warning:  Multiple target SRPM's found in $pkgs->{$pkg}{MODULE}.\n";
                print "$progname:  Assuming that $srpm is the correct one.\n";
            }
        } else {
            $srpm = 0;
        }
        if ($srpm) {
            # The target SRPM already exists.  Skip this stage.
            print "$progname:  The target SRPM for \"$pkg\" already exists in $cwd/$pkgs->{$pkg}{MODULE}.\n";
            print "$progname:  I'll assume it's the right one.  Compose stage for \"$pkg\" is complete.\n";
            $srpm =~ m/^(\S+)-([^-]+)-([^-]+)\.(?:no)?src\.rpm$/;
            ($pkgs->{$pkg}{VERSION}, $pkgs->{$pkg}{RELEASE}) = ($2, $3);
            $pkgs->{$pkg}{FILENAME} = "$cwd/$pkgs->{$pkg}{MODULE}/$srpm";
            next;
        }

        if ($pkgs->{$pkg}{SPECFILE} && -f $pkgs->{$pkg}{SPECFILE}) {
            # If they gave us the spec file and it exists, use that.
            $specfile = $pkgs->{$pkg}{SPECFILE};
        } else {
            # First choice:  Exactly one file named <pkg>-<distro>.spec
            ($pn = $prodname) =~ s/^va-//;
            @tmp = grep($_ =~ /^($pkg-)?(va-)?$pn\.spec/, @contents);
            if ($#tmp != 0) {
                # Second choice:  Exactly one file named <pkg>.spec
                @tmp = grep($_ =~ /^$pkg\.spec/, @contents);
                if ($#tmp != 0) {
                    # Third choice:  The first match to *.spec*
                    @tmp = grep($_ =~ /\.spec/, @contents);
                }
            }
            $specfile = $tmp[0];
            if (!defined $specfile || $specfile =~ /^$/) {
                # Our attempt to guess failed.  They need to specify the spec file in the .prod file.
                &fail_package($pkg, "compose", "No spec file could be located in $pkgs->{$pkg}{MODULE}");
                next;
            }
        }

        undef @srcs;
        if ($pkgs->{$pkg}{SRCS}) {
            @srcs = split(",", $pkgs->{$pkg}{SRCS});
        } else {
            my $fname;

            foreach $fname (@contents) {
                # Ignore revision control goop
                next if ($fname =~ /^(CVS|SCCS|RCS|BitKeeper)$/);
                # Ignore the revtool-generated ChangeLog
                next if ($fname =~ /^[Cc]hanges?\.?[Ll]og$/);
                # Ignore dotfiles
                next if ($fname =~ /^\./);
                # Ignore spec files
                next if ($fname =~ /\.spec(\.in)?$/);
                # Ignore the debian/ directory
                next if ($fname =~ /^debian$/ && -d $fname);
                if (-d $fname) {
                    push @srcs, "$fname:$fname.tar.gz";
                } else {
                    push @srcs, $fname;
                }
            }
        }

        foreach $src (@srcs) {
            my ($src_files, $tarball) = split(":", $src);

            $src_files =~ s/\&/ /g;
            if ($tarball) {
                my $zip;

                if ($pkgs->{$pkg}{TAR}) {
                    $cmd = $pkgs->{$pkg}{TAR};
                    $cmd =~ s/\%f/$src_files/;
                    $cmd =~ s/\%t/$builddir\/SOURCES\/$tarball/;
                } else {
                    if ($pkgs->{$pkg}{ZIP}) {
                        $zip = "--use-compress-program=\"$pkgs->{$pkg}{ZIP}\"";
                    } elsif ($src =~ /(gz|Z)$/) {
                        $zip = "--use-compress-program=gzip";
                    } elsif ($src =~ /\.bz2$/) {
                        $zip = "--use-compress-program=bzip2";
                    }
                    $cmd = "tar --exclude CVS --exclude RCS --exclude BitKeeper --exclude SCCS"
                            . " $zip -cf $builddir/SOURCES/$tarball $src_files";
                }
                dprint "Creating $tarball:  $cmd\n";
                unlink($tarball);
                if (!open(CMD, "$cmd 2>&1 |")) {
                    &fail_package($pkg, "compose", "Execution of \"$cmd\" failed -- $!");
                    $err = 1;
                    last;
                }
                $err = 0;
                while (<CMD>) {
                    chomp($line = $_);
                    print "tar output -> $line\n";
                }
                close(CMD);
                dprint "\"$cmd\" returned $?\n";
                if ($?) {
                    &fail_package($pkg, "compose", "Creation of vendor source tarball $tarball from failed");
                    $err = 1;
                    last;
                }
            } else {
                my $rc;

                $rc = system("cp -f $src_files $builddir/SOURCES/") >> 8;
                if ($rc) {
                    &fail_package($pkg, "compose", "Unable to copy $src_files to $builddir/SOURCES/ -- $!");
                    $err = 1;
                    last;
                }
            }
        }
        if ($err) {
            next;
        }

    }
    chdir($cwd);
    print "$progname:  Compose stage is now complete.  (${\(&get_timestamp())})\n";
}

# main() here is basically the same as main() in C
sub
main
{
    my $ret;

    # Set up the basic variables
    $progname = "pkgtool";
    $version = "0.1";

    # See the Getopt::Long man page for details on the syntax of this line
    @valid_opts = ("h|help", "v|version", "d|debug", "b|build", "i|install", "c|contents",
                   "g|generate", "o|sources:s", "p|package=s", "s|specfile|scripts=s", "m|module=s",
                   "r|release-tag=s", "t|head-tag=s", "P|program=s", "R|rcfile=s");
    Getopt::Long::Configure("no_getopt_compat", "bundling", "no_ignore_case");
    Getopt::Long::GetOptions(@valid_opts);

    # Post-parse the options stuff
    if ($opt_v) {
        # Do not edit this variable.  It is updated automatically by CVS when you commit
        my $rcs_info = 'CVS Revision $Revision: 1.6 $ created on $Date: 2000/06/28 23:14:40 $ by $Author: mej $ ';

        $rcs_info =~ s/\$\s*Revision: (\S+) \$/$1/;
        $rcs_info =~ s/\$\s*Date: (\S+) (\S+) \$/$1 at $2/;
        $rcs_info =~ s/\$\s*Author: (\S+) \$ /$1/;
        print "\n";
	print "$progname $version by Michael Jennings <mej\@eterm.org>\n";
        print "Copyright (c) 2000, Michael Jennings and VA Linux Systems, Inc.\n";
        print "  ($rcs_info)\n";
        print "\n";
	return PKGTOOL_SUCCESS;
    }
    if ($opt_b) {
        $mode = "build";
    } elsif ($opt_i) {
        $mode = "install";
    } elsif ($opt_c) {
        $mode = "contents";
    } elsif ($opt_g) {
        $mode = "generate";
    } else {
        &fatal_error("Nothing to do!\n");
    }

    print "\n\n*** Warning:  $progname is under heavy development.  Unless you are the developer, don't use it.\n\n";

    if ($opt_h || (! $mode)) {
	&print_usage_info();   # Never returns
        # This is a really silly way to shut up the "used only once" warnings.
        $opt_h = $opt_v = $opt_b = $opt_c = $opt_i = $opt_g = 0;
    }
    $debug = ($opt_d ? $opt_d : 0);
    $srcs = ($opt_o ? $opt_o : 0);
    $pkg_file = ($opt_p ? $opt_p : 0);
    $pkg_prog = ($opt_P ? $opt_P : 0);
    $specfile = $script_dir = ($opt_s ? $opt_s : 0);
    $module = ($opt_m ? $opt_m : 0);
    $release_tag = ($opt_r ? $opt_r : 0);
    $head_tag = ($opt_t ? $opt_t : 0);
    $rcfile = ($opt_R ? $opt_R : 0);

    # Signal handling
    $SIG{HUP} = 'IGNORE';
    $SIG{INT} = \&handle_signal;
    $SIG{TERM} = \&handle_signal;
    $SIG{QUIT} = \&handle_fatal_signal;
    $SIG{ILL} = \&handle_fatal_signal;
    $SIG{ABRT} = \&handle_fatal_signal;
    $SIG{FPE} = \&handle_fatal_signal;
    $SIG{SEGV} = \&handle_fatal_signal;
    $SIG{BUS} = \&handle_fatal_signal;
    $SIG{TSTP} = \&handle_fatal_signal;
    $SIG{TTIN} = \&handle_fatal_signal;
    $SIG{TTOU} = \&handle_fatal_signal;
    $SIG{__WARN__} = \&handle_warning;

    # Environment modifications
    $ENV{MAKE} = "make";  # Make sure we don't parallel build, because it doesn't work.
    $ENV{CFLAGS} = "-O2 -march=pentium";  # A bit of optimization, but not much.
    $ENV{LD_LIBRARY_PATH} = "";  # Make glibc happy

    if ($specfile) {
        if (-f $specfile && -s _) {
            $type = "rpm";
            &parse_spec_file($specfile);
        } elsif (-d $script_dir) {
            $type = "deb";
        } else {
            eprint "You must specify a valid spec file or script directory with -s\n";
            return PKGTOOL_SYNTAX_ERROR;
        }
    }
    if (! $pkg_file && $#ARGV >= 0) {
        $pkg_file = join(" ", @ARGV);
    }
    if ($pkg_file) {
        if ($pkg_file =~ /\.(deb|gz)$/) {
            $type = "deb";
        } elsif ($pkg_file =~ /\.rpm$/) {
            $type = "rpm";
        }
        dprint "Package type is $type\n";
    }

    if ($mode eq "build") {
        if ($type eq "rpm") {
            # FIXME:  Maybe I should detect if source file generation is needed here?
            if ($specfile) {
                $ret = &rpm_build($specfile);
            } elsif ($pkg_file && $pkg_file =~ /src\.rpm$/) {
                $ret = &rpm_build($pkg_file);
            }
        } elsif ($type eq "deb") {
            $ret = &deb_build();
        }
    } elsif ($mode eq "install") {
        if (! $pkg_file) {
            eprint "You cannot perform an install without specifying a package.\n";
            return PKGTOOL_SYNTAX_ERROR;
        }
        if ($type eq "rpm") {
            $ret = &rpm_install($pkg_file);
        } elsif ($type eq "deb") {
            $ret = &deb_install($pkg_file);
        }
    } elsif ($mode eq "contents") {
        if ($type eq "rpm") {
            $ret = &rpm_show_contents($pkg_file);
        } elsif ($type eq "deb") {
            $ret = &deb_show_contents($pkg_file);
        }
    } elsif ($mode eq "generate") {
    }

    return $ret;
}

exit &main();
