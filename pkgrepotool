#!/usr/bin/perl -Tw
#
# pkgrepotool -- Tool for managing package repositories
# 
# Copyright (C) 2007, Michael Jennings
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to
# deal in the Software without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
# sell copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies of the Software, its documentation and marketing & publicity
# materials, and acknowledgment shall be given in the documentation, materials
# and software packages that this Software was used.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
# IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
# $Id: pkgrepotool,v 1.7 2007/05/24 16:33:36 mej Exp $
#

use strict;

# Include the Perl Modules we need
use POSIX;
use Mezzanine::Util;
use Mezzanine::Config;
use Mezzanine::PkgVars;
use Mezzanine::Pkg;
use Mezzanine::RPM;

# Configuration data.
my $config;

my @config_vars = ("DEBUG", "DIRS", "INTERACTIVE", "NEWEST", "OLD",
                   "OLDEST", "SCM", "SPAN", "TEST");

# Print usage information
sub
print_usage_info
{
    my ($leader, $underbar);

    print "\n";
    $leader = "$PROGNAME $VERSION Usage Information";
    $underbar = $leader;
    $underbar =~ s/./-/g;
    print "$leader\n$underbar\n";
    print "\n";
    print "  Syntax:   pkgrepotool [ options ]\n";
    print "\n";
    print "    -h --help                        Show this usage information\n";
    print "    -d --debug                       Turn on debugging\n";
    print "    -v --version                     Show version and copyright\n";
    print "    -s --scan                        Scan and list packages in repository\n";
    print "    -a --add                         Add package(s) to one or more repos\n";
    print "    -r --remove --rm                 Remove package(s) from one or more repos\n";
    print "    -c --compare                     Compare repos\n";
    print "    -m --merge                       Merge packages from one repo into others\n";
    print "    -C --closure                     Verify repository dependency closure\n";
    print "    -i --interactive                 Prompt before taking action\n";
    print "    -t --test                        Test only; do not take action\n";
    print "    -S --scm                         Use Mezzanine SCM commands to add/remove\n";
    print "    -D --directories --dirs <dirs>   Directories to use as repositories\n";
    print "       --newest                      Select only the newest version of each package\n";
    print "       --oldest                      Select only the oldest version of each package\n";
    print "       --old                         Select only outdated packages\n";
    print "       --span                        Treat all repositories as one\n";
    print "       --diffonly --do               When comparing, show only differences\n";
    #print "    -M --metadata <type>             Metadata type to generate\n";
    #print "                                     \n";
    print "       --savecfg                     Preserve current settings for future use\n";
    print "\n";
    exit(MEZZANINE_SUCCESS);
}

# Return the newest RPM in a list, or the list sorted newest -> oldest
sub
get_newest(@)
{
    my @rpms = @_;

    @rpms = reverse(&rpm_sort(@rpms));
    return ((wantarray()) ? (@rpms) : ($rpms[0]));
}

# Return the oldest RPM in a list, or the list sorted oldest -> newest
sub
get_oldest(@)
{
    my @rpms = @_;

    @rpms = &rpm_sort(@rpms);
    return ((wantarray()) ? (@rpms) : ($rpms[0]));
}

# Build hash of package name -> array of RPM's
sub
build_package_hash($)
{
    my $scan = $_[0];
    my $pkgs;

    foreach my $dir (sort(keys(%{$scan}))) {
        foreach my $pkg (sort(keys(%{$scan->{$dir}}))) {
            # pkgs->{DIR}{NAME} is a list of filenames
            push @{$pkgs->{$dir}{$scan->{$dir}{$pkg}{"NAME"}}}, $pkg;
        }
    }
    return $pkgs;
}

# Get only the newest packages from the complete scan list.
sub
filter_newest($)
{
    my $scan = $_[0];
    my $pkgs;

    $pkgs = &build_package_hash($scan);

    # For each unique package, keep only the newest one.
    foreach my $dir (sort(keys(%{$pkgs}))) {
        foreach my $pkg (sort(keys(%{$pkgs->{$dir}}))) {
            my @rpms = &get_newest(@{$pkgs->{$dir}{$pkg}});

            shift @rpms;
            foreach my $rpm (@rpms) {
                delete $scan->{$dir}{$rpm};
            }
        }
    }
    return $scan;
}

# Get only the oldest packages from the complete scan list.
sub
filter_oldest($)
{
    my $scan = $_[0];
    my $pkgs;

    $pkgs = &build_package_hash($scan);

    # For each unique package, keep only the oldest one.
    foreach my $dir (sort(keys(%{$pkgs}))) {
        foreach my $pkg (sort(keys(%{$pkgs->{$dir}}))) {
            my @rpms = &get_oldest(@{$pkgs->{$dir}{$pkg}});

            shift @rpms;
            foreach my $rpm (@rpms) {
                delete $scan->{$dir}{$rpm};
            }
        }
    }
    return $scan;
}

# Get only old packages in the scan list (exact opposite of newest).
sub
filter_old($)
{
    my $scan = $_[0];
    my $pkgs;

    $pkgs = &build_package_hash($scan);

    # For each unique package, pick only the old one.
    foreach my $dir (sort(keys(%{$pkgs}))) {
        foreach my $pkg (sort(keys(%{$pkgs->{$dir}}))) {
            my @rpms = &get_newest(@{$pkgs->{$dir}{$pkg}});
            my $newest_rpm = shift @rpms;

            delete $scan->{$dir}{$newest_rpm};
        }
    }
    return $scan;
}

# Merge all repositories into one
sub
span_dirs($)
{
    my $scan = $_[0];

    foreach my $dir (keys(%{$scan})) {
        foreach my $pkg (keys(%{$scan->{$dir}})) {
            $scan->{'-'}{$pkg} = $scan->{$dir}{$pkg};
        }
        delete $scan->{$dir};
    }
    return $scan;
}

# Display differences between two repositories
sub
compare_dirs($$)
{
    my ($pkgs1, $pkgs2) = @_;
    my (@pkgs1, @pkgs2, @results);
    my ($i, $j);

    # Create sorted arrays of package names
    @pkgs1 = sort(keys(%{$pkgs1}));
    @pkgs2 = sort(keys(%{$pkgs2}));

    dprintf("Comparing %d packages from master dir with %d packages from slave dir.\n",
            scalar(@pkgs1), scalar(@pkgs2));
    for (($i, $j) = (0, 0); ($i < scalar(@pkgs1)) && ($j < scalar(@pkgs2)); ) {
        my $c = $pkgs1[$i] cmp $pkgs2[$j];

        dprintf("Comparing %s (%d) vs. %s (%d):  $c\n", $pkgs1[$i], $i, $pkgs2[$j], $j);
        if ($c < 0) {
            push @results, [ '<<', $pkgs1[$i] ];
            $i++;
        } elsif ($c > 0) {
            push @results, [ '>>', $pkgs2[$j] ];
            $j++;
        } else {
            # For packages that both dirs contain, compare the RPM sets.
            if (! $config->get("DIFFONLY")) {
                push @results, [ '==', $pkgs1[$i] ];
            }
            push @results, &compare_package_sets($pkgs1->{$pkgs1[$i]}, $pkgs2->{$pkgs2[$j]});
            $i++, $j++;
        }
    }
    # Handle any leftovers.
    while ($i < scalar(@pkgs1)) {
        push @results, [ '<<', $pkgs1[$i] ];
        $i++;
    }
    while ($j < scalar(@pkgs2)) {
        push @results, [ '>>', $pkgs2[$j] ];
        $j++;
    }
    return @results;
}

# Display differences between two sets of a given package
sub
compare_package_sets($$)
{
    my ($pkgs1, $pkgs2) = @_;
    my (@pkgs1, @pkgs2, @results);
    my ($i, $j);

    # Create sorted arrays of RPM packages.
    @pkgs1 = map { &basename($_) } &rpm_sort(@{$pkgs1});
    @pkgs2 = map { &basename($_) } &rpm_sort(@{$pkgs2});

    dprintf("Comparing %d package files from master dir with %d package files from slave dir.\n",
            scalar(@pkgs1), scalar(@pkgs2));
    for ($i = 0, $j = 0; ($i < scalar(@pkgs1)) && ($j < scalar(@pkgs2)); ) {
        my $c = &rpm_cmp($pkgs1[$i], $pkgs2[$j]);

        dprintf("Comparing %s (%d) vs. %s (%d):  $c\n", $pkgs1[$i], $i, $pkgs2[$j], $j);
        if ($c < 0) {
            push @results, [ '<', $pkgs1[$i] ];
            $i++;
        } elsif ($c > 0) {
            push @results, [ '>', $pkgs2[$j] ];
            $j++;
        } else {
            if (! $config->get("DIFFONLY")) {
                push @results, [ '=', $pkgs1[$i] ];
            }
            $i++, $j++;
        }
    }
    # Handle any leftovers.
    while ($i < scalar(@pkgs1)) {
        push @results, [ '<', $pkgs1[$i] ];
        $i++;
    }
    while ($j < scalar(@pkgs2)) {
        push @results, [ '>', $pkgs2[$j] ];
        $j++;
    }
    return @results;
}

# Merge packages from master repository (#1) to slave repository (#2)
sub
merge_dirs($$$)
{
    my ($pkgs, $master, $slave) = @_;
    my (@comparison);

    @comparison = &compare_dirs($pkgs->{$master}, $pkgs->{$slave});

    for (my $i = 0; $i < scalar(@comparison); ) {
        my ($status, $pkg) = @{$comparison[$i]}[(0, 1)];

        dprint "$status $pkg\n";
        if ($status eq "<<") {
            # Package only exists in master.  Merge to slave.
            &merge_package_all($pkg, $pkgs->{$master}{$pkg}, $master, $slave);
            $i++;
        } elsif ($status eq "==") {
            my @set_comparison;

            # Package exists in both master and slave.  Check individual package files.
            for ($i++; length($comparison[$i][0]) == 1; $i++) {
                push @set_comparison, $comparison[$i];
            }
            if (!scalar(grep { $_->[0] eq '<' } @set_comparison)) {
                # All package files match too.  Next!
                next;
            }
            # If we get here, master has some files slave lacks.  Merge.
            &merge_package_set(\@set_comparison, $master, $slave);
        }
    }
}

# Merge an entire package set that only the master repo has
sub
merge_package_all($$$)
{
    my ($pkg, $pkgs, $master, $slave) = @_;
    my @pkgs = @{$pkgs};

    print "Merging $pkg into $slave:\n";
    print map { "    $_\n" } @pkgs;
    if ($config->get("INTERACTIVE")) {

    } else {

    }
}

# Merge a package set from master to slave where some files may already match.
sub
merge_package_set($$$)
{

}

# Copy a single package file from the master to the slave repo
sub
merge_single_package($$$)
{
    my ($pkg, $master, $slave) = @_;

    dprint "Merging package $pkg from $master into $slave\n";
}

# main() here is basically the same as main() in C
sub
main
{
    my ($err, $msg, $mode, $scan);
    my @dirlist;

    # For taint checks
    delete @ENV{("IFS", "CDPATH", "ENV", "BASH_ENV")};
    $ENV{"PATH"} = "/bin:/usr/bin:/sbin:/usr/sbin";
    foreach my $shell ("/bin/bash", "/usr/bin/ksh", "/bin/ksh", "/bin/sh", "/sbin/sh") {
        if (-f $shell) {
            $ENV{"SHELL"} = $shell;
            last;
        }
    }

    $err = 0;
    &mezz_init("pkgrepotool", "1.0", "help|h", "version|v", "debug|d!", "savecfg|save-config!",
               "scan|s", "closure|C", "add|a", "remove|rm|r", "compare|c", "merge|m",
               "newest", "old", "oldest", "interactive|i!", "test|t!", "scm|S!", "span!", "diffonly|do!",
               "dirs|directories|D=s@", "metadata|M=s@");

    if ($OPTION{"version"}) {
        # Do not edit this.  It is updated automatically by CVS when you commit.
        &print_version($PROGNAME, $VERSION, "Michael Jennings",
                       'CVS Revision $Revision: 1.7 $ created on $Date: 2007/05/24 16:33:36 $ by $Author: mej $ ');
    } elsif ($OPTION{"help"} || (!scalar(@ARGV) && !scalar(%OPTION) && &basename($0) !~ /^mz/)) {
        &print_usage_info();
    }
    $config = Mezzanine::Config->new("repo/config");
    if (!scalar($config->keys())) {
        $OPTION{"savecfg"} = 1;
    }

    # Set config based on options
    &debug_set(&bool_config_opt($config, "DEBUG", "debug"));
    &bool_config_opt($config, "NEWEST", "newest");
    &bool_config_opt($config, "OLDEST", "oldest");
    &bool_config_opt($config, "OLD", "old");
    &bool_config_opt($config, "DIFFONLY", "diffonly");
    &bool_config_opt($config, "INTERACTIVE", "interactive");
    &bool_config_opt($config, "TEST", "test");
    &bool_config_opt($config, "SCM", "scm");
    &bool_config_opt($config, "SPAN", "span");

    if (($0 =~ /scan$/) || ($OPTION{"scan"})) {
        $mode = "scan";
    } elsif (($0 =~ /closure$/) || ($OPTION{"closure"})) {
        $mode = "closure";
    } elsif (($0 =~ /(compare|comp|cmp|diff)$/) || ($OPTION{"compare"})) {
        $mode = "compare";
    } elsif (($0 =~ /merge$/) || ($OPTION{"merge"})) {
        $mode = "merge";
    } elsif (($0 =~ /add$/) || ($OPTION{"add"})) {
        $mode = "add";
    } elsif (($0 =~ /(rm|remove)$/) || ($OPTION{"remove"})) {
        $mode = "remove";
    } else {
        $mode = "scan";
    }

    # Get directory list from config, options, or command line.
    @dirlist = split(':', $config->get("DIRS"));
    if ($OPTION{"dirs"} && ref($OPTION{"dirs"}) && (ref($OPTION{"dirs"}) eq "ARRAY")) {
        @dirlist = @{$OPTION{"dirs"}};
    } elsif (scalar(@ARGV)) {
        @dirlist = grep { -d $_ || ($_ =~ /^(ht|f)tps?:\/\//) } @ARGV;
        @ARGV = grep { ! -d $_ || ($_ !~ /^(ht|f)tps?:\/\//) } @ARGV;
    }
    $config->set("DIRS", join(':', @dirlist));
    dprint "Using directory list:  ", join(', ', @dirlist), "\n";

    # Save configuration if needed.
    if ($OPTION{"savecfg"}) {
        $config->save();
    }

    if ($mode =~ /^(scan|closure|compare|merge|add|remove)$/) {
        $scan = &rpm_scan_files(@dirlist);
        if ($config->get("SPAN")) {
            &span_dirs($scan);
        }
        if ($OPTION{"old"}) {
            &filter_old($scan);
        }
        if ($OPTION{"newest"}) {
            &filter_newest($scan);
        } elsif ($OPTION{"oldest"}) {
            &filter_oldest($scan);
        }
    }

    # Check for directory list stupidity
    if ($mode eq "compare" || $mode eq "merge") {
        if (scalar(@dirlist) <= 1) {
            if ($config->get("SPAN")) {
                eprint "Cannot use SPAN and $mode together.\n";
            } else {
                eprint "Two or more directories required for $mode.\n";
            }
            return MEZZANINE_SYNTAX_ERROR;
        }
    }

    if ($mode eq "scan") {
        foreach my $dir (sort(keys(%{$scan}))) {
            foreach my $pkg (&rpm_sort(keys(%{$scan->{$dir}}))) {
                print "$pkg\n";
            }
        }
    } elsif ($mode eq "closure") {
    } elsif ($mode eq "compare") {
        my $pkgs;
        my $maindir = shift @dirlist;

        $pkgs = &build_package_hash($scan);
        foreach my $dir (@dirlist) {
            my @results;

            @results = &compare_dirs($pkgs->{$maindir}, $pkgs->{$dir});
            #dprint &examine_object(\@results);
            print "*** Comparing $maindir with $dir\n";
            print map { "$_->[0] $_->[1]\n" } @results;
        }
    } elsif ($mode eq "merge") {
        my $pkgs;
        my $maindir = shift @dirlist;

        $pkgs = &build_package_hash($scan);
        foreach my $dir (@dirlist) {
            if ($dir =~ /^(ht|f)tps?:\/\//) {
                eprint "Unable to merge into remote repository.  Skipping $dir\n";
            } else {
                print "*** Merging $maindir with $dir\n";
                &merge_dirs($pkgs, $maindir, $dir);
            }
        }
    } elsif ($mode eq "add") {
    } elsif ($mode eq "remove") {
    }
    return $err;
}

exit &main();
