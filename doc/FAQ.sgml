<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook V3.1//EN" [
<!ENTITY MZ "<application>Mezzanine</application>">
<!ENTITY MZVER "1.5">
<!ENTITY DOCID "$Id: FAQ.sgml,v 1.1 2001/07/18 22:47:49 mej Exp $">
]>
<article class="FAQ">
<artheader>
  <title>&MZ; &MZVER; FAQ</title>
  <author><firstname>Michael</firstname><surname>Jennings</surname></author>
  <authorinitials>mej</authorinitials>
</artheader>

<para>
  This document answers some frequently-asked questions (FAQ's) about
  &MZ;.  Use the table of contents below to find the question
  that pertains to your situation, or browse through all the questions
  in order.
</para>

<qandaset defaultlabel="number">
  <qandadiv>
    <title>General Questions</title>
    <qandaentry id="g1q1">
      <question>
        <para>What is &MZ;?</para>
      </question>
      <answer>
        <para>
          &MZ; is a set of tools, mostly written in Perl, which
          simplify and expedite the tasks involved with creating and
          maintaining a software product.  This is mostly used in the
          creation of the underground Linux distribution called
          <ulink url="http://www.kainx.org/vermillion/">Vermillion</ulink>,
          but it can be applied to any product of any nature or size.
        </para>
        <para>
          Currently only RPM/SRPM packages are supported, along with
          &MZ;'s own custom SPM and FST formats for helping RPM and CVS
          work together well.  Further, it has only been tested with Red
          Hat's distribution of Linux, but in theory it should work with
          any RPM-based distro.
        </para>
      </answer>
    </qandaentry>
    <qandaentry id="g1q2">
      <question>
        <para>Who wrote &MZ;?</para>
      </question>
      <answer>
        <para>
          &MZ; was written by Michael Jennings, also known as "KainX" on
          IRC and "mej" via e-mail or in person.  He is also responsible
          for Eterm, a terminal emulator for the X Window System; libast,
          a small library of handy functions; and Vermillion, the custom
          RedHat-based Linux distribution.
        </para>
      </answer>
    </qandaentry>
    <qandaentry id="g1q3">
      <question>
        <para>Why should I use it?</para>
      </question>
      <answer>
        <para>
          &MZ; makes maintaining software packages much easier.
          Specifically, it automates the processes of importing packages
          into source code control, creating patch files for changes to
          the base source, building products and their component packages,
          creating installation media for products, and so forth.
        </para>
        <para>
          If you have a RedHat-based Linux system and have tried
          downloading and building SRPM's from other places, you have
          likely experienced the difficulty of patching the source and
          adding those patches to the SRPM.  &MZ; makes this very
          easy.
        </para>
      </answer>
    </qandaentry>
    <qandaentry id="g1q4">
      <question>
        <para>Why Red Hat and not Debian/Slackware/SuSe?</para>
      </question>
      <answer>
        <para>
          Well, there are two answers to this question, really.  The first
          answer explains why I originally went with RedHat.  After using
          Debian for awhile at 3Com and when I first arrived at VA Linux,
          I grew extremely annoyed and frustrated with dselect, dpkg, and
          apt.  VA was still selling servers back then, and they all came
          pre-loaded with a custom version of RedHat.
        </para>
        <para>
          When my frustration level finally reached critical, I switched
          over to VA's custom distro (VA Linux 6.1.1 at the time).  I
          never looked back.  It worked exactly the way I wanted it to,
          and it took me no time at all to learn the in's and out's of RPM
          packaging.
        </para>
        <para>
          Eventually, I began maintaining VA's distro myself.  It soon got
          a name change due to RedHat lawyers throwing a hissy fit; it was
          henceforth known as "Red Hat Linux with VA Linux Enhancements,"
          or "RH-VALE."  (It was originally "RH/VALE," but you can't use
          '/' in filenames....)
        </para>
        <para>
          Now, for the second part of this question:  Why did I stick with
          RedHat?  The RPM-based philosophy is far more compatible with
          this type of development.  The Debian community, especially the
          group of developers, are largely zealots who do not feel that
          individuals or small groups should be creating and releasing
          their own .deb packages.  Furthermore, IMHO, Debian has its head
          fairly well entrenched in RMS's posterior; RMS has long since
          lost sight of the true vision and goal, preferring instead to
          focus on ego-centric concerns, and I refuse to be party to his
          religious activism.
        </para>
        <para>
          Yes, there are other RPM-based distro's.  I don't really have a
          problem with Linux-Mandrake, as they seem to do a much better
          job at keeping up with package updates in a stable, useable
          manner.  I refuse to use SuSe due to the unfortunate fascist
          nature of its YaST config tool.
        </para>
        <para>
          First and foremost, however, I use RedHat because it's the
          distro with which I am most familiar and about which I have the
          most knowledge and expertise.  In the end, it all boils down to
          that.
        </para>
      </answer>
    </qandaentry>
    <qandaentry id="g1q5">
      <question>
        <para>Do you plan to support other formats in the future?</para>
      </question>
      <answer>
        <para>
          There are currently hooks in place for Debian support.  I do not
          use Debian, nor do I use dpkg, so I have no fleshed out the
          backend code for those sections yet.  In theory, it shouldn't be
          too much work; the biggest problem will be the fact that the
          creators of dpkg elected to not have a true source package
          format (a la SRPM).
        </para>
      </answer>
    </qandaentry>
  </qandadiv>

  <qandadiv>
    <title>&MZ; and Source Code Management</title>
    <qandaentry id="g2q1">
      <question>
        <para>Why would I want to do SCM with &MZ;?</para>
      </question>
      <answer>
        <para>
          &MZ; provides a series of wrappers around source code
          management.  Currently, the only interface which has been
          fleshed out is the CVS one, but others could easily be
          added.
        </para>
        <para>
          SCM tools can be flexible and powerful, but that also means
          they tend to complicate the simpler things.  &MZ; has
          several tools that streamline and automate the most common
          SCM tasks.
        </para>
      </answer>
    </qandaentry>
    <qandaentry id="g2q2">
      <question>
        <para>Which commands use SCM?</para>
      </question>
      <answer>
        <para>
          The following &MZ; commands directly manipulate the SCM
          repository.  Although other &MZ; commands also interact with
          the repository, they use these basic operations to do so.
        </para>
        <table frame="sides">
          <title>&MZ; SCM Command Summary</title>
          <tgroup cols="2" align="left" colsep="1" rowsep="0">
            <colspec colnum="1" colname="c1">
            <colspec colnum="2" colname="c2">
            <spanspec spanname="footerspan" namest="c1" nameend="c2" align="center">
            <tfoot>
              <row>
                <entry spanname="footerspan"><para>
                  Note that there are other &MZ; commands that also
                  interact with the repository.  However, they are
                  not simply encapsulated repository operations, so
                  they are not listed here.
                </para></entry>
              </row>
            </tfoot>
            <tbody>
              <row>
                <entry><filename>mzadd</filename></entry>
                <entry>Mark new files for inclusion in repository</entry>
              </row>
              <row>
                <entry><filename>mzdiff</filename></entry>
                <entry>Generate a diff between current source and repository</entry>
              </row>
              <row>
                <entry><filename>mzget</filename></entry>
                <entry>Download latest source from repository</entry>
              </row>
              <row>
                <entry><filename>mzlog</filename></entry>
                <entry>View log of changes to one or more files</entry>
              </row>
              <row>
                <entry><filename>mzlogin</filename></entry>
                <entry>Login to the repository</entry>
              </row>
              <row>
                <entry><filename>mzput</filename></entry>
                <entry>Upload any changes in your local source to the repository</entry>
              </row>
              <row>
                <entry><filename>mzreset</filename></entry>
                <entry>Remove any persistent meta-information (tags, dates) in local source</entry>
              </row>
              <row>
                <entry><filename>mzrm</filename></entry>
                <entry>Mark files for removal from repository</entry>
              </row>
              <row>
                <entry><filename>mzrtag</filename></entry>
                <entry>Symbolically tag repository sources</entry>
              </row>
              <row>
                <entry><filename>mzstat</filename></entry>
                <entry>Obtain status information on file(s)</entry>
              </row>
              <row>
                <entry><filename>mztag</filename></entry>
                <entry>Symbolically tag local sources</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </answer>
    </qandaentry>
    <qandaentry id="g2q3">
      <question>
        <para>I want to get sources from a different repository.  How do I do that?</para>
      </question>
      <answer>
        <para>
          All the repository commands in the table above share a
          common interface.  This allows you to combine certain
          operations so that you can do things more efficiently.  This
          is especially obvious in this particular scenario.
        </para>
        <para>
          Let's say you want to use &MZ; to obtain the latest CVS
          sources for <ulink
          url="http://www.eterm.org/">Eterm</ulink>, but your
          <envar>$CVSROOT</envar> is already setup for a different
          repository.  We'll furthermore assume that you have never
          obtained these sources before, and that you want to do so
          anonymously.  Using CVS directly, you would enter:
        </para>
        <screen>
          cvs -d :pserver:anonymous@cvs.enlightenment.sourceforge.net:/cvsroot/enlightenment login
          cvs -d :pserver:anonymous@cvs.enlightenment.sourceforge.net:/cvsroot/enlightenment co eterm
        </screen>
        <para>
          However, &MZ; will allow you to combine the two steps into
          one.  It will even check your
          <filename>~/.cvspass</filename> to see if you actually need
          to perform the "login" or not.  The command is:
        </para>
        <screen>
          mzget -lD :pserver:anonymous@cvs.enlightenment.sourceforge.net:/cvsroot/enlightenment eterm
        </screen>
        <para>
          The <userinput>-l</userinput> option causes a login to be
          performed if needed.  It does not take any options, so the
          <userinput>-D</userinput> option may follow it immediately
          without needing another <userinput>-</userinput>.  The
          <userinput>-D</userinput> option specifies a repository
          other than the default; in this case, the
          <ulink url="http://www.enlightenment.org/">Enlightenment</ulink>
          CVS repository.  The rest of the command line (which is
          simply "<userinput>eterm</userinput>" in this example, but
          could contain as many names as desired) consists of the
          names of modules to download.
        </para>
      </answer>
    </qandaentry>
    <qandaentry id="g2q4">
      <question>
        <para>When I upload my changes, what actually happens?</para>
      </question>
      <answer>
        <para>
          As you may have noticed, the
          <filename>mzput</filename> command actually does a lot
          more than just upload your changes to the repository.  For
          example, the very first thing it does (by default; use the
          <userinput>--blind</userinput> option to override this) is
          download an update from the repository to make sure that
          there are no conflicts and that you have the latest
          changes.  If any conflicts are found, the upload will not
          even be attempted (since it would fail anyway).
        </para>
        <para>
          If the update is successful,
          <filename>mzput</filename> will note the date/time,
          your userid, and your name (assuming it's in the GECOS
          field), and will create a template for a ChangeLog entry.
          It will then open this template in an editor (chosen from
          <envar>$EDITOR</envar>) for you to fill in.  It will not
          permit an empty ChangeLog message; in fact, if nothing is
          added to the template, the upload will be aborted.
        </para>
        <para>
          After you save your ChangeLog entry and exit the editor, the
          contents of the template will be appended to the ChangeLog
          file in the current directory (it will be created and added
          to the upload if not present) followed by a separator line.
          The ChangeLog file is then added to the list of files to
          upload, and the upload is performed.
        </para>
        <para>
          It is common for developers to want to add or remove files
          and upload them at the same time.  By default, if any file
          or directory names are specified on the
          <filename>mzput</filename> command line, only those
          files/directories will be uploaded.  However, if the
          <userinput>-a</userinput> option is specified (e.g.,
          <userinput>mzput -a file1 file2 file3</userinput>), a
          general upload will be done, and the files/directories
          listed on the command line will be added to the repository.
          This is a shorter way of accomplishing the same task as:
        </para>
        <screen>
          mzadd file1 file2 file3
          mzput
        </screen>
        <para>
          The <userinput>-r</userinput> option may be used in an
          identical fashion to remove files and upload changes to the
          repository (e.g., <userinput>mzrm file1 file2
          file3</userinput>, a shortcut for
        </para>
        <screen>
          mzrm file1 file2 file3
          mzput
        </screen>
        <para>
          You may additionally specify the <userinput>-x</userinput>
          option to indicate that only those files which have been
          added/removed should be synced to the repository.
          Furthermore, <userinput>-x</userinput> by itself as an
          option to <filename>mzput</filename> indicates that the
          ChangeLog file should be neither appended to, nor created,
          nor uploaded.
        </para>

        <table frame="sides">
          <title>&MZ; SCM "Put" Command Summary</title>
          <tgroup cols="2" align="left" colsep="1" rowsep="0">
            <colspec colnum="1" colname="c1">
            <colspec colnum="2" colname="c2">
            <tbody>
              <row>
                <entry><filename>mzput</filename></entry>
                <entry>Upload all changes to the repository, and append ChangeLog entry.</entry>
              </row>
              <row>
                <entry><filename>mzput file1 file2 ...</filename></entry>
                <entry>Upload only specified file(s) if changed (including ChangeLog entry).</entry>
              </row>
              <row>
                <entry><filename>mzput -a file1 file2 ...</filename></entry>
                <entry>Add specified file(s) and upload all changes (w/ ChangeLog).</entry>
              </row>
              <row>
                <entry><filename>mzput -r file1 file2 ...</filename></entry>
                <entry>Remove specified file(s) and upload all changes (w/ ChangeLog).</entry>
              </row>
              <row>
                <entry><filename>mzput -x</filename></entry>
                <entry>Upload all changes without appending ChangeLog entry.</entry>
              </row>
              <row>
                <entry><filename>mzput -x file1 file2 ...</filename></entry>
                <entry>Upload only specified file(s) (no ChangeLog entry).</entry>
              </row>
              <row>
                <entry><filename>mzput -x -a file1 file2 ...</filename></entry>
                <entry>Add and upload specified file(s) only (w/o ChangeLog).</entry>
              </row>
              <row>
                <entry><filename>mzput -x -r file1 file2 ...</filename></entry>
                <entry>Remove and upload specified file(s) only (w/o ChangeLog).</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </answer>
    </qandaentry>
    <qandaentry id="g2q5">
      <question>
        <para>How do I create a branch?</para>
      </question>
      <answer>
        <para>
          The first step is to determine whether or not you want to
          create the branch from the sources you have locally, or if
          you want to branch off from the head of the main trunk of
          the repository.  That will determine whether you use
          <filename>mztag</filename> (for the former case) or
          <filename>mzrtag</filename> (for the latter case).  For
          purposes of this example, I'll use the former case, but
          tagging the repository directly (other than the extra
          <userinput>r</userinput>) isn't any different.
        </para>
        <para>
          Next, you need to choose the tag you want.  Tags should
          contain uppercase letters, underscores, and hyphens only.  I
          highly recommend tagging things using the package name and
          version number, replacing spaces with hyphens and dots with
          underscores.  For example, if you were to be tagging version
          0.9.1 of Eterm, use the tag
          <userinput>ETERM-0_9_1</userinput>.  This makes translating
          back and forth between tags and package/version pairs easy.
        </para>
        <para>
          Last, note the use of the <userinput>-b</userinput> option,
          which signifies that a branch should be created using the
          specified tag as its name.  And finally, the command:
        </para>
        <screen>
          mztag -b FOO-1_0
        </screen>
        <para>
          This command will create a new branch with the specified
          tag.  If you want to work on the created branch, make sure
          you immediately follow the above command with:
        </para>
        <screen>
          mzget -t FOO-1_0
        </screen>
        <para>
          Though some SCM systems may do this for you, some may not.
          Better to get in the habit of it to be on the safe side.
        </para>
      </answer>
    </qandaentry>
  </qandadiv>

  <qandadiv>
    <title>Managing Individual Packages with &MZ;</title>
    <qandaentry id="g3q1">
      <question>
        <para>What's an SPM? FST? CFST?</para>
      </question>
      <answer>
        <para>
          Like any system, some rather complex concepts are more
          easily described by agreed-upon terminology.  As &MZ; has a
          fairly unique view of software products and their
          components, I had to come up with some way of describing
          that view.  And thus were born some new <ulink
          url="http://dictionary.reference.com/search?q=tla">TLA</ulink>'s
          (including one <ulink
          url="http://dictionary.reference.com/search?q=xtla">XTLA</ulink>).
        </para>
        <para>
          When you drill down on a product, through all the layers of
          products and sub-products, you wind up with a big (or small,
          as the case may be) list of packages that make up that
          product.  From the perspective of the overall product build
          (i.e., buildtool), a package is a package.  However, the
          underlying build routines distinguish between several
          different types of packages, some of which actually require
          building, and others which only need to be moved into
          place.
        </para>
        <para>
          From the packager's perspective, there are generally two
          types of packages: source packages and binary packages.
          From a buildmaster/build system perspective, there are also
          two types of packages: those that are built from source into
          binaries and those that aren't.  For purposes of building,
          &MZ; recognizes the following 4 types of buildable packages:
        </para>

        <table frame="sides">
          <title>&MZ; Buildable Package Types</title>
          <tgroup cols="2" align="left" colsep="1" rowsep="0">
            <colspec colnum="1" colname="c1">
            <colspec colnum="2" colname="c2">
            <tbody>
              <row>
                <entry>Source Package</entry>
                <entry>
                  This term refers to a single file which contains all
                  source and instructions necessary to build the
                  package.  Specifically, this refers to an SRPM or a
                  tarball containing a spec file.
                </entry>
              </row>
              <row>
                <entry>Source Package Module (SPM)</entry>
                <entry>
                  In order to maintain a source package under SCM, it
                  is "exploded" into a directory structure which &MZ;
                  understands.  This directory structure is called an
                  SPM (not to be confused with SRPM).  The SPM
                  contains three directories:  <filename>S</filename>,
                  which contains the source file(s);
                  <filename>P</filename>, which holds the patches to
                  be applied to the original vendor source; and
                  <filename>F</filename>, which contains the spec file
                  or other build instructions.  Running
                  <filename>mzimport</filename> on an SRPM will give
                  you an SPM.  You can then use other &MZ; commands to
                  manipulate the SPM to create patches, run a build of
                  the package, etc.
                </entry>
              </row>
              <row>
                <entry>Full Source Tree (FST)</entry>
                <entry>
                  Back in the early days of &MZ; (then called
                  "Avalon"), the unarchived (untarred) vendor source
                  was imported into SCM just like a normal source
                  tree.  Then each subsequent patch to the source was
                  made, tagged, and checked in.  The build process
                  involved building the original source tarball (based
                  on a tag and instructions held in the SRCS package
                  variable in the prod file), creating each patch
                  one-by-one (using mzdiff and the patch tags), then
                  moving everything into place so that <filename>rpm
                  -ba</filename> could generate the needed binary and
                  source packages.  Although this approach was an
                  interesting one, it proved cumbersome and was
                  largely abandoned.  &MZ; still supports it, largely
                  because &MZ; itself is still maintained as an FST.
                </entry>
              </row>
              <row>
                <entry>Custom-built Full Source Tree (CFST)</entry>
                <entry>
                  The "Custom-built" part means that the package is
                  responsible for building itself (rather than &MZ;
                  building it).  The CFST contains a file called
                  <filename>Makefile.mezz</filename> which contains
                  all commands required to generate the source
                  tarball, spec file, and/or patches, and build source
                  and binary package files from them.  &MZ; invokes
                  the <filename>make</filename> command and provides
                  some basic variables telling what it wants and where
                  it expects things to end up; the rest is entirely up
                  to the package.  This technique is most valuable for
                  projects that are already maintained under SCM and
                  would like &MZ; to be able to build the packages
                  from the original project source tree.  (The
                  filename was chosen such that its purpose would be
                  clear without interfering with the normal build
                  process of existing applications.)
                </entry>
              </row>
            </tbody>
          </tgroup>
        </table>
        <para>
          As you can see, the terms are important shorthand for
          describing fairly involved concepts concisely.
        </para>
      </answer>
    </qandaentry>
    <qandaentry id="g3q2">
      <question>
        <para>How do I get a package into the system?</para>
      </question>
      <answer>
        <para>
          Short answer:  Import it!
        </para>
        <para>
          The <filename>mzimport</filename> tool is designed to help
          you get a package into SCM and ready for modification.  The
          simplest way to import a package is to get an SRPM (e.g.,
          from <ulink url="http://freshrpms.net/">FreshRPM's</ulink>
          or <ulink url="http://rpmfind.net/">RPMFind</ulink>) and
          import that.  &MZ; will automatically turn the SRPM into an
          SPM for you, after which the directory tree is imported into
          the repository.
        </para>
        <para>
          Let's say, for example, you've gone out on the Interweb and
          found yourself an SRPM for the "pile sarnet" package (which,
          as everyone knows, is required for a system to be
          functional).  You've downloaded
          <filename>pile-sarnet-1.0.7-3.src.rpm</filename> and you
          want to get it into your tree.  Here's how you do it:
        </para>
        <screen>
          mzimport pile-sarnet-1.0.7-3.src.rpm
        </screen>
        <para>
          Yep, that's it.  &MZ; does everything automatically.  NOTE:
          if you don't have a repository or aren't connected to the
          network, you can still use &MZ; to modify the package.
          Simply specify the <userinput>-L</userinput> (local mode)
          option to prevent &MZ; from trying to talk to a repository.
          The following command will create an SPM called
          <filename>pile-sarnet</filename> in your current directory:
        </para>
        <screen>
          mzimport -L pile-sarnet-1.0.7-3.src.rpm
        </screen>
        <para>
          The local mode flag can also be used with the other commands
          in this section, excluding (obviously) those like
          <filename>mzget</filename> and <filename>mzput</filename>
          which are intended solely to interact with the repository.
        </para>
        <para>
          As another example, let's assume you used local mode to
          create an SPM on your workstation, but now you want to
          import it into the SCM repository.  It's still pretty easy;
          you just need to supply one more piece of information.
        </para>
        <para>
          You see, if you have an SRPM, &MZ; can determine the package
          name and version from the filename.  It doesn't currently go
          digging inside the directory tree for spec files, though, so
          you have to supply that information when you import a
          directory tree.  So, assuming you're in the top-level
          directory of what you want to check in, the command is:
        </para>
        <screen>
          mzimport -n pile-sarnet-1.0.7
        </screen>
        <para>
          (If you're not in that directory, simply add the path to it
          at the end of the command line above.)
        </para>
      </answer>
    </qandaentry>
    <qandaentry id="g3q3">
      <question>
        <para>How do I add a patch to a package?</para>
      </question>
      <answer>
        <para>
          This is where &MZ; really shines.  Without it, generating a
          patch involves installing the SRPM, untarring the source,
          applying all the other patches, patching the source,
          repeating steps 2 and 3 in another location, generating a
          diff between the two, putting it in the right place, adding
          it to the spec file as a patch, and building from the spec
          file and sources again.  A long, tedious process.
          Thankfully, &MZ; automates much of it.
        </para>
        <para>
          The first step is to download the SRPM and import it, or do
          whatever you need to do to make it into an SPM.  And if you
          imported it, you'll want to check it out again so you can
          work on the copy of it that's under SCM.  For the rest of
          this section, I'll assume you're not using local mode
          (<userinput>-L</userinput>); if you are, make sure to add
          that option to the <filename>mzpatch</filename> command
          also.
        </para>
        <para>
          First, <filename>cd</filename> into your SCM's top directory
          (the one that contains the F, P, and S subdirectories).
          Then run <filename>mzprep</filename>.  This will create a
          fully-patched version of the unarchived source in a
          directory called <filename>work</filename>.  Make your
          changes to the source in that directory.
        </para>
        <para>
          Once you've made your changes, you'll want to turn them into
          a patch.  Run <filename>mzpatch -n &lt;patch&gt;</filename>,
          where &lt;patch&gt; is the name you want your new patch to
          have.  &MZ; will generate the patch and place it in the
          <filename>P</filename> directory for you.  Then, all you
          have to do is add it to the spec file!  (Don't forget the
          <userinput>%patch -p1</userinput> macro, and to update the
          release number!)
        </para>
        <para>
          When you've updated the spec file, the
          <filename>mzbuild</filename> command will allow you to build
          the package with your new patch included.  If it works,
          you'll get a new set of packages in the top-level SPM
          directory.  If needed, use <filename>mzput</filename> to
          commit your changes (after testing the packages first, of
          course).  And you're done!
        </para>
        <para>
          For the sake of furthering this discussion, let's say your
          patch doesn't quite work the way you wanted it to.  If you
          re-run <filename>mzprep</filename>, you'll get a new working
          tree with your patch already applied.  Make whatever
          alterations you need to, then regenerate the patch using the
          command <filename>mzpatch -n &lt;patch_num&gt;</filename>,
          where &lt;patch_num&gt; is the patch number you assigned to
          your patch in the spec file.  &MZ; will automatically
          re-generate the patch for you, merging your previous changes
          with the new ones.
        </para>
        <para>
          A complete example:
        </para>
        <screen>
          mzget pile-sarnet
          cd pile-sarnet
          mzprep
          ...make code changes...
          mzpatch -n pile-sarnet-1.0.7-somebody_screwed_up.patch
          ...edit spec file to put in Patch1000...
          mzbuild
          mzprep
          ...make more changes...
          mzpatch -n 1000
          mzbuild
        </screen>
        <para>
          (Please note that the stuff enclosed in ellipses ("...") are
          editorial comments, NOT commands.)
        </para>
      </answer>
    </qandaentry>
    <qandaentry id="g3q4">
      <question>
        <para>How do I build a package?</para>
      </question>
      <answer>
        <para>
          As mentioned in the previous example, if you're inside the
          package directory, simply running
          <filename>mzbuild</filename> will do the trick.  If not, or
          if the package you want to build is an SRPM or something,
          simply give the path to the package (e.g., <filename>mzbuild
          pile-sarnet-1.0.7-3.src.rpm</filename>).
        </para>
      </answer>
    </qandaentry>
  </qandadiv>

<!--
  <qandadiv>
    <title></title>
    <qandaentry id="g1q1">
      <question>
        <para></para>
      </question>
      <answer>
        <para>
          
        </para>
      </answer>
    </qandaentry>
  </qandadiv>
-->

</qandaset>

</article>
