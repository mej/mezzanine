########################################################################
#            Building the VA Linux Distribution with Avalon
#
#  Written by:  Michael Jennings
#
#  $Id: build_server.txt,v 1.3 2001/04/04 02:15:40 mej Exp $
#
########################################################################

The following is a step-by-step guide on how to prepare a build server
which is capable of building the VA Linux distribution (also known as
RedHat with VA Linux Enhancements, or RH-VALE).  Note that you will
need to be root to perform most of these steps.  You will also need to
build as root, so you should either have a dedicated build machine, or
build in a chroot'd environment.

1.  Install the latest available version of VA Linux
----------------------------------------------------

A build server must have installed all the development headers and
libraries which the distribution needs.  Thus, it is a much larger
install than normal.  When installing the system, be sure to do a
"Custom" install.  When presented with the package group selection
screen, scroll all the way down to the bottom and select "Everything."
This will install all the base OS packages on your system.  The
complete install takes about 30 minutes on a P3/500 processor system.

2.  Install the additional Powertools packages required
-------------------------------------------------------

If you do not have a copy of the Powertools CD, NFS mount the tree
from engr (engr:/pub/VALinux/6.2.4/powertools/cd) onto your build
system.  Then cd into Powertools/i386 and run the following command:

rpm -Uvh alien-* sip-* libax25-* lesstif-* R-base-* SDL-* aalib-* \
         ocaml-* libcdaudio-* pccts-* xmake-* OffiX-devel-* lha-* \
         icqlib-* sane-* fpc-* hfsutils-* mkhybrid-* nasm-* \
         sgml-* jade-* jadetex-* tetex-*

2.  Install the FFTW library and header files
---------------------------------------------

The FFTW library comes from RedHat in two packages, the fftw RPM and
the fftw-devel RPM.  Unfortunately, RedHat 6.2 shipped with different
versions of these two packages, so in order to install them both, one
had to ignore the dependencies:

rpm -Uvh --nodeps fftw-*

If you are using packages from a recent VA Linux distribution, we have
our own FFTW package which is entirely self-contained, so simply
install it as normal:

rpm -Uvh fftw-*

The FFTW package(s) can be found in the same location as the other
Powertools listed in step #2.

4.  Rebuild the "swatch" package from an SRPM
---------------------------------------------

The swatch package requires a lot of additional Perl modules that
don't come with the system by default.  If you rebuild swatch from
source by hand, it will download and install them for you.  Obtain the
latest swatch SRPM and execute the following command:

rpm --rebuild swatch-*src.rpm

Note that the build will fail after each new Perl module installation,
so you will need to repeat this command several times before it will
succeed.

Also, if one of the CPAN packages fails repeatedly at the same place
(as has happened in the past with File::Tail), simply cd into
$HOME/.cpan/build/<package> and run this:

perl Makefile.PL && make && make install

Once that completes successfully, try the rpm --rebuild command again.

5.  Remove the "pax" package from the system
--------------------------------------------

The POSIX archive tool, pax, will hang the build while processing the
ircII package.  However, if ircII does not detect pax, it will
substitute tar or cp instead, so you can safely remove pax from the
system.

rpm -e pax

If you are using VA Linux 6.2.4, the pax package is on the Powertools
CD and thus will not have been installed.

6.  Download and install Avalon
-------------------------------

You can obtain the latest release of Avalon via FTP from engr:

ftp://engr.valinux.com/pub/avalon/

Alternatively, visit the Avalon project page on engr:

https://engr.valinux.com/project/?group_id=16

Look on the right-hand side for the "File Releases" section and
download the latest release from the "avalon rpm" module by clicking
on the "[i386 rpm]" link.  Then install this package like so:

rpm -Uvh avalon-*

If you have not used Avalon previously, be sure to read the README in
/usr/doc/avalon-*.

7.  Link strip to safetool
--------------------------

Unfortunately, some RPM's try to do silly things like run strip on
/usr/lib/*.so* while building.  The safetool program watches to make
sure things like this don't happen.  The following commands will make
sure that safetool is called instead of strip:

mkdirhier /usr/build/bin
ln -s /usr/bin/safetool /usr/build/bin/strip

8.  Create your base directory
------------------------------

The core of the build process is in a directory called the "base"
directory.  This is akin to the root directory of the build process;
everything happens in or under the base directory.  Create and cd into
a directory on a filesystem with plenty of space (at least 12 GB):

mkdir /bigdisk/base
cd /bigdisk/base

9.  Download the product files
------------------------------

You can't build products without product files, so make sure you have
the latest set.  The product files should be downloaded into a
directory called products which is under, or parallel to, the base
directory from step #8.  If you do not have a copy of the product
files yet, make sure you're in the base directory and run:

revtool -lgD :pserver:anonymous@engr.valinux.com:/cvs/build products

When prompted for a password, just hit Enter.

10.  Increase file descriptor count in kernel
---------------------------------------------

If you are going to run a highly parallel build, you are likely to
exceed the kernel's standard 4096 file descriptor limit.  A value of
16384 is recommended and can be set by doing the following:

echo 16384 > /proc/sys/fs/file-max

11.  Add users
--------------

Some packages may require that certain users exist on the build
system.  For example, the system must have a "postfix" user to build
the postfix package.  Add the user like so:

adduser postfix

12.  Run a build
----------------

The simplest way to run a build is with the command:

buildtool -p va-redhat-6.2.4

However, if you are running on a multi-processor machine, you should
definitely take advantage of Avalon's parallelization support.
Recording a log file is also recommended since Avalon's output tends
to scroll by very quickly.  Finally, buildtool's default behavior is
to stop immediately if the build for a particular package fails.  This
is often not desireable for those doing complete, unattended builds of
the OS.  Thus, the following is the command usually used to build VA
Linux:

buildtool -Px2 -fp va-redhat-6.2.4 -l va.log

There are many other command-line options to buildtool which may
interest you.  To see a list of all of them, run:

buildtool -h

One last thing.  If you wish to build ISO's after the build completes,
pass the "-bi" option to buildtool.  If you also want buildtool to
clean up after the build is done (usually you don't), specify "-ba"
instead.

13.  RedHat Variables
---------------------

After you run through a build the first time, you might notice that
the redhat-release package ends up with "%{release_version}" in its
name instead of an actual version number.  This is a RedHat-ism.
buildtool creates its own rpmrc and rpmmacros files for the build
process.  These files are created in the base directory at the very
beginning of the build process.

If you Ctrl-C the build early on, you can edit the rpmmacros file to
include the following lines:

%release_name           Piglet
%release_version        6.2

Change the name and number to reflect the appropriate RedHat version,
of course.  Then restart the build.  If you did a complete build, you
will need to remove the erroneous RPM's and run another build.
