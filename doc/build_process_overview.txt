########################################################################
#          Overview of the Build Process Procedures and Tools
#
#  Written by:  Michael Jennings
#
#  $Id: build_process_overview.txt,v 1.6 2003/12/02 20:47:43 mej Exp $
#
########################################################################

This document contains information on basic usage of the build system.
This is intended simply as a brief introduction and should not be
considered a substitute for the complete Mezzanine documentation.

1.  REVTOOL
-----------

Since the build system must not depend on any one particular revision
management mechanism, revtool provides an encapsulation layer that
performs the basic functions needed to manipulate a revision control
system.  It is designed in such a way that changing control systems
would require only changing the commands revtool executes and should
be a fairly straight-forward process.

Here's a basic overview of revtool's syntax.  Keep in mind that each
command has an alias (given in parentheses) that can be used for
shorthand.

  revtool -g   (mzget)      Retrieves one or more files or modules
                            from the master repository.  Does a CVS
                            checkout or update.  Like a "pull" in bk.

  revtool -p   (mzput)      Uploads changes to the master repository.
                            A commit in CVS, or a commit and push in
                            bk.  'p' is for "put," like 'g' for "get."

  revtool -a   (mzadd)      Mark new files for addition to the
                            repository.  "add" in cvs, "new" in bk.

  revtool -r   (mzrm)       Mark files for removal from the
                            repository.  "rm -f" in cvs, either "rm"
                            or "gone" in bk.

There's more, but that's the basic idea.  The cool stuff:  a put will
actually generate a ChangeLog header for you and open your editor
automatically.  It'll even create the ChangeLog if it isn't there, and
add it too.  Also, you can do an add or a remove and immediately
commit it using -a -p or -r -p.  (Note that "revtool -a -p" is
equivalent to "mzput -a", as is "revtool -r -p" to "mzput -r".)

In practice, programmers being as lazy as they are, aliases like
"mzget" and "mzput" are almost always used instead of calling revtool
directly.


2.  BUILDTOOL
-------------

buildtool (a.k.a., mzprodbuild) is the overseer of the entire build
process.  It is designed to use product manifest files (prod files) to
define what pieces make up a particular product.

A product is composed of packages and (possibly) other products.  A
package is either a source package that will be rebuilt, a source
package with corresponding binary packages, a single binary package,
or a CVS module.  buildtool parses the prod file for the product name
you give it; if necessary, it will also look for and parse prod files
of any sub-products defined by the top-level product.

For example:

# Sample product
name:foo
version:1.0

module:vacm rev=VACM-2-0-0
module:Eterm
srpm:contrib-rh/imlib ver=1.9.8 rel=1
srpm:contrib-rh/epplets-0.6-1.src.rpm tag=VA-6-2-1
product:bar-1.0

Everything up until the first "name:" line is ignored, as are comment
lines starting with '#'.  Once a product name is encountered, it is in
effect until overridden by another "name:" line.  Each "name:" line
can have one or more versions (denoted by "version:" lines) associated
with it.  As with the product name, the version is in effect until
overridden, either by a new version, or by a new product name.  A
single product file can define as many versions of as many products as
desired.  However, organization is served best by only having one
product file per product; in fact, for larger products, one product
file per version is wise.

After the name and version are established, the components of that
product (in this case, "foo-1.0") are defined.  You've got a CVS
module called "vacm" which should be retrieved using the "VACM-2-0-0"
tag.  You have another module called "Eterm" whose head branch should
be used.  You have an SRPM of imlib on the head branch of the
contrib-rh module, and an epplets SRPM on the "VA-6-2-1" branch.
(tag= and rev= are synonyms.)  Finally, you have a child product
called "bar" at version 1.0; its prod file will be parsed, and all its
component packages and sub-products will be included in the build
process.

Once all product files are parsed, the product is described by a set
of packages.  Now the build process begins.  This process is most
often run parallelized (using the -P option), but it may be run
serially as well.  Regardless of which type of build (serial or
parallel) is used, each package is built using the
build_single_package() function in buildtool.  This routine is
deceptively simple, as most of the actual build mojo happens inside
encapsulated package routines in the various Perl modules.
Nevertheless, it's important to understand that buildtool views all
packages, regardless of type, in a uniform manner.  Think of buildtool
as the conductor of the package symphony; its job is to make sure each
individual musician does its part so that the whole end result is
good.  If any portions of the "symphony" fail, buildtool points the
blame and tries to denote what went wrong.
