########################################################################
#            Software Engineering Build Server Information
#
#  Written by:  Michael Jennings
#               Ted T'so
#
#  $Id: README,v 1.2 2000/05/09 03:42:12 mej Exp $
#
########################################################################

0.  Introduction and Quick Start
--------------------------------

This document is intended as a brief overview of the new Software
Engineering build system:  how it works, how to use it, and some of the
design philosophies behind it.  It also details the various standards
policies which govern its contents, so those planning on adding and/or
maintaining its contents should read those sections carefully.

For those wishing to simply build a particular VA product, you will
find a directory called products under this one.  It contains a series
of files with .prod extensions.  Find the file with the name of the
product you wish to build, then invoke the following command at your
shell prompt:

$ ./buildtool -bp -p <product>

...where <product> is the name of the product file, but without the
.prod on the end.  This command should be run by your regular user
account (not root) and should be run from the directory which contains
buildtool and this README file.  Executing this command will build all
packages associated with that product, both binary and source packages.
If you wish to build ISO images as well, use -bi instead of -bp.

The following sections will have more detailed information on how to
use the system, so if you are going to be involved in the actual day-
to-day maintenance of the system or any packages within the system,
keep reading!

1.  Overall Philosophy
----------------------

The build system is designed on two basic concepts:  the "product" and
the "package."  A "product" is a collection of packages which form some
coherent entity when you put them all together, such as a distribution.
A "package" is the basic unit which the build system must know how to
take from its "source" form and generate its "target" form.  Take care
not to confuse this term with "package file."  Although a package can
take the form of a package file, like an SRPM, not all packages are
package files, nor are all package files packages.

In general, the build system works with two basic types of packages.
Some packages are modified by VA before being included in our
enhanced distribution(s), while others are taken directly from RedHat
or some other source.  The build system must be able to seamlessly
handle both these cases.  For the latter case, the packages are simply
kept as SRPM's, and buildtool knows how to explode the SRPM and build
from the exploded sources.

The former case is much more complicated.  Packages which are modified
internally by VA are stored as directory trees containing the source,
the necessary spec files, and any other files required by the build
process.

2.  Revision Control
--------------------

3.  Packages
------------

4.  Standards and Conventions
-----------------------------

5.  Tool Usage Guidelines
-------------------------

