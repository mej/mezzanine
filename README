########################################################################
#            Software Engineering Build Server Information
#
#  Written by:  Michael Jennings
#               Ted T'so
#
#  $Id: README,v 1.6 2000/06/14 20:34:05 mej Exp $
#
########################################################################

0.  INTRODUCTION AND QUICK START
--------------------------------

This document is intended as a brief overview of the new Software
Engineering build system:  how it works, how to use it, and some of the
design philosophies behind it.  It also details the various standards
policies which govern its contents, so those planning on adding to
and/or maintaining part(s) of the tree should read those sections
carefully.

Before you can build any products, you must set your machine up to be
able to run the build system tools.  Since you are reading this README
file, you must have checked out the "base" module.  Within that module
is a directory called "pm" which contains another directory called
"getopt."  This getopt directory contains the Getopt::Mixed Perl
module which is required for the build scripts to function properly.
You will need to go into pm/getopt and run the following command as
root:  "perl Makefile.PL ; make ; make install".  Once you have done
this, return to the base directory and proceed as shown below.

For those wishing to simply build a particular VA product, you will
find a directory called products under this one.  It contains a series
of files with .prod extensions.  Find the file with the name of the
product you wish to build, then invoke the following command at your
shell prompt:

$ ./buildtool -p <product>

...where <product> is the name of the product file, but without the
.prod on the end.  This command should be run by your regular user
account (not root) and should be run from the directory which contains
buildtool and this README file.  Executing this command will build all
packages associated with that product, both binary and source packages.
If you wish to build ISO images as well, use -bi as well as -p.

The following sections will have more detailed information on how to
use the system, so if you are going to be involved in the actual day-
to-day maintenance of the system or any packages within the system,
keep reading!


1.  OVERALL PHILOSOPHY
----------------------

The build system is designed on two basic concepts:  the "product" and
the "package."  A "product" is a collection of packages which form some
coherent entity when you put them all together, such as a distribution.
A "package" is the basic unit which the build system must know how to
take from its "source" form and generate its "target" form.  Take care
not to confuse this term with "package file."  Although a package can
take the form of a package file, like an SRPM, not all packages are
package files, nor are all package files packages.

In general, the build system works with two general classifications of
packages.  Some packages are modified by VA before being included in
our enhanced distribution(s), while others are taken directly from
RedHat or some other source.  The build system must be able to
seamlessly handle both these cases.  For the latter case, the packages
are simply kept as SRPM's, and buildtool knows how to explode the SRPM
and build from the exploded sources.

The former case is much more complicated.  Packages which are modified
internally by VA are stored as directory trees containing the source,
the necessary spec files, and any other files required by the build
process.  These directory trees will hereafter be referred to by their
proper term in revision control lingo, "modules."

Several tools are employed as user-level interfaces to this system.
The first, called "revtool," handles all interaction with the revision
control system.  It encapsulates all revision-control-system-specific
commands and gives them an interface which is independent of the
underlying system.  Thus, if the repository was moved from CVS to,
say, BitKeeper, revtool's code would change, but its interface would
remain the same.

The second tool is "buildtool," mentioned briefly above.  buildtool is
what takes a product name/version pair, like "va-redhat-6.2.1" and
translates that via a series of product definition/configuration files
("prod files" for short) into a set of packages to build.  It then
builds those packages, creating both source and binary package files.
It can also use these packages to build ISO images for product CD's.

There are other tools, such as pkgtool and safetool, which are not yet
ready for widespread use.  We'll discuss those when that situation
changes.


2.  REVISION CONTROL WITH REVTOOL
---------------------------------

The syntax of revtool is intended to be generic, in that it should
apply well to any arbitrary revision control system one might choose.
Each function revtool performs should translate into zero or more
commands specific to the revision control system in question.  For
example, a "put" in revtool-speak is analogous to a "commit" in CVS
lingo.  A "get" in revtool is either a "checkout" or an "update" in
CVS, or a "pull" in BitKeeper.  Thus, revtool acts as an encapsulation
layer for the underlying revision control system.

revtool also assists in routine upkeep actions, like maintaining the
ChangeLog.  revtool will append your commit log entry to the ChangeLog
automatically.  It will even create the ChangeLog for you if it
doesn't exist, and the date and identity information are provided for
you.

Finally, revtool acts as a means of policy enforcement.  This allows
us to ensure that commits are properly tagged, for example.
Consistency and cleanliness of operation are vital for the ongoing
functionality, stability, and manageability of the build system, and
revtool allows us to enforce the policies that provide those things
before anything enters the tree that could disrupt it.

2.1.  Retrieving and Updating Package Sources
---------------------------------------------

The most common activity for which revtool is used is obtaining
sources from the master server.  In revtool lingo, this is referred to
as a "get" operation and is performed via the "-g" or "--get"
options.  If any names are present on the command line, they will be
used.  If you wish to specify a particular tag for the get operation,
use the -t option.

Examples:

  To update a module in the current directory:
     revtool -g

  To download the "Eterm" module from the master server:
     revtool -g Eterm

  To retrieve the "imlib" package using a tag:
     revtool -gt IMLIB-1-9-8 imlib

  To obtain the "varmon" and "vacm" trees simultaneously:
     revtool -g varmon vacm

2.2.  Adding and Removing Files from the Master Server
------------------------------------------------------

As part of maintaining a package, it is sometimes necessary to add or
remove files from the source tree.  Special steps must be taken within
a revision control environment to add/remove files while still
maintaining the ability to check out the tree exactly as it existed in
a particular version or at a particular date/time.  Thus, you must use
revtool when adding or deleting files within a module.

Addition is done using the "-a" or "--add" options.  Removal uses the
"-r" or "--remove" options.  These options require that the files to
be added or removed be listed on the command line, and they cannot be
used simultaneously.  (If no files are listed on the command line, but
revtool is being run from a tty, you will be prompted to enter the
filename globs.)

The option syntax of revtool is designed to allow several things to
happen at once.  For example, you can add files and commit them with a
single revtool command.  The same applies for removing files.  An
unfortunate side effect of this ability is that you cannot use -a and
-r at the same time.  However, it is still possible to add some files,
remove some other files, and commit the module, all at once.  You must
use the --add-list and --rem-list options to do this.

Examples:

  To add a new README file to the current module:
     revtool -a README

  To add all the C files in the current directory:
     revtool -a *.c

  To add a FAQ file and commit all changes to the module:
     revtool -ap FAQ

  To add a FAQ and commit only the new FAQ file:
     revtool -axp FAQ

  (Note:  The -r option works in the exact same way.)

  To add "Makefile.am," remove "Makefile" and "Makefile.in," and
  commit:
     revtool -p --add-list Makefile.am --rem-list "Makefile Makefile.in"

2.3.  Committing New Changes to the Master Server
-------------------------------------------------

Even though you may alter files on your local machine, no one else can
see your changes until you upload (a.k.a. "push" or "commit") them to
the master server.  This operation is called a "put" in revtool-
speak.  You must also realize that adding or removing files (as shown
above) must be accompanied by (or followed by) a "put" in order to
make the change permanent.

Part of your responsibility when making changes to the master
repository is documenting the changes you've made and why they were
made.  This is the purpose of a "change log" or a "commit log."  This
document is updated each time a put operation is performed.

When you perform a put, the editor of your choice (as determined by
the $EDITOR environment variable) is opened and contains a template
change log entry.  This template contains date/time stamp with your
userid (and name if available).  Go to the last line of this template
and type a description of the changes you're uploading.  Your
description should be brief but as accurate and complete as possible.
This message will be automatically appended to the ChangeLog file just
before revtool uploads your changes.

By default, the "-p" and "--put" options IGNORE any filenames that
might appear on the command line.  This is so that additions and
removals may be easily combined with puts ("-ap" or "-rp") that commit
the entire module, not just the added/removed files.  If you want a
particular put to only operate on the specified files, add the "-x" or
"--exclusive" option ("-xp").  Also note that puts should be done from
the top directory of the module to which you are making changes.

Examples:

  To upload your changes in the current module to the master server:
     revtool -p

  To commit only your changes to the README file:
     revtool -xp README

2.4.  Querying the Master Server
--------------------------------

2.5.  Creating Modules for New Packages
---------------------------------------

2.6.  Tagging Sources
---------------------


3.  BUILDING PRODUCTS
---------------------

The most common task the average user will want to perform with this
system is to build products.  In corporate terms, a product is any
piece of work that actually ships to customers.  The build system, on
the other hand, defines a product as a collection of packages and
other products which form a coherent whole.  The program which manages
the process of building products, buildtool, has yet another
definition.  A product, according to buildtool, is anything that has a
.prod file in the products directory.  The .prod file describes a
product in terms of its components and how they fit together.

The average user, however, will not need to know how product files
work or what their contents mean.  All they'll need to know is what
product, and what version of that product, they wish to build.  In
general, it should be easy to look at the *.prod files in the products
directory and tell which one names the product you wish to build.  For
example, if you want to build the Web CD, try finding a product file
named "webcd" or "web-cd."  (The actual filename would end in ".prod,"
of course, but we'll ignore that part for the sake of discussion.)

If you can't find the product you're looking for, it may not be in the
build system yet.  Feel free to ask one of the build system
maintainers for assistance.

The purpose of buildtool is to provide a consistent interface to the
end user for building products while simultaneously simplifying the
management and organization of product development in a revision
controlled environment.  In other words, the end user shouldn't have
to care how the rpm command works or what the proper syntax is for
mkhybrid.  Likewise, the people who maintain the products and packages
behind the scenes should have a system which allows them to build
products in a flexible manner but still enforces good design and
proper change management.

To this end, the syntax for buildtool is designed to be very simple
for the average user to employ while still being sufficiently powerful
for the power user to get done what needs to be done as efficiently as
possible.  This section will discuss buildtool syntax, starting with
the basics and finishing with the more powerful stuff.  Casual users
may want to stop before getting to the complicated parts.

3.1.  Running a Simple Build
----------------------------




4.  PACKAGE MAINTAINER'S GUIDE
------------------------------

5.  STANDARDS AND CONVENTIONS
-----------------------------
