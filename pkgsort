#!/usr/bin/perl -w
#
# pkgsort -- Tool for generating source/patch files from a source code repository
# 
# Copyright (C) 2000, Michael Jennings
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to
# deal in the Software without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
# sell copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies of the Software, its documentation and marketing & publicity
# materials, and acknowledgment shall be given in the documentation, materials
# and software packages that this Software was used.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
# IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
# $Id: pkgsort,v 1.6 2000/09/20 18:47:28 mej Exp $
#

# Include the Perl Modules we need
require POSIX;
require Getopt::Long;

# Constants
#
# Return codes for pkgtool
sub PKGTOOL_SUCCESS()           {0;}
sub PKGTOOL_FATAL_ERROR()       {1;}
sub PKGTOOL_SYNTAX_ERROR()      {2;}
sub PKGTOOL_COMMAND_FAILED()    {3;}

sub PKGTOOL_MISSING_FILES()     {10;}
sub PKGTOOL_SPEC_ERRORS()       {11;}
sub PKGTOOL_DEPENDENCIES()      {12;}
sub PKGTOOL_ARCH_MISMATCH()     {13;}
sub PKGTOOL_BUILD_FAILURE()     {14;}
sub PKGTOOL_BAD_MODULE()        {15;}

sub PKGTOOL_TERMINATED()        {50;}
sub PKGTOOL_CRASHED()           {60;}
sub PKGTOOL_UNSPECIFIED_ERROR   {127;}

# Return codes for pkgsort
sub PKGSORT_SUCCESS()           {0;}
sub PKGSORT_FATAL_ERROR()       {1;}
sub PKGSORT_SYNTAX_ERROR()      {2;}
sub PKGSORT_COMMAND_FAILED()    {3;}

sub PKGSORT_UNRESOLVED_DEP()    {10;}
sub PKGSORT_CIRCULAR_DEP()      {11;}

sub PKGSORT_TERMINATED()        {50;}
sub PKGSORT_CRASHED()           {60;}
sub PKGSORT_UNSPECIFIED_ERROR   {127;}


# Print usage information
sub
print_usage_info
{
    print "\n";
    $leader = "$progname $version Usage Information";
    $underbar = $leader;
    $underbar =~ s/./-/g;
    print "$leader\n$underbar\n";
    print "\n";
    print "  Syntax:   pkgsort [ options ]\n";
    print "\n";
    print "    -h --help                        Show this usage information\n";
    print "    -d --debug                       Turn on debugging\n";
    print "    -v --version                     Show version and copyright\n";
    print "    -s --sort <flag(s)>              Specify which criterion to sort on\n";
    print "    -f --format <type>               Specify the output format (names, files, prod)\n";
    print "    -D --dir <directory>             Specify one or more directories from which to take packages\n";
    print "    -l --list <file>                 Take the input package list from \"file\" instead of the command line\n";
    print "    -o --outfile <file>              Output the resulting package list to \"file\" instead of stdout\n";
    print "\n";
    print "Valid sort flags are:  a for alphabetical by binary package\n";
    print "                       d for dependency\n";
    print "                       p for provisions\n";
    print "                       s for alphabetical by source package\n";
    print "                       r to reverse the sort order (in addition to one of the above flags)\n";
    print "\n";
    exit(PKGSORT_SUCCESS);
}

# Generate timestamp for debugging/log file
sub
get_timestamp
{
    return POSIX::strftime("%A, %d %B %Y %H:%M:%S %Z", localtime);
}

# Report a fatal error
sub
fatal_error
{
    my $msg = "$progname:  FATAL:  $_[0]";

    print STDERR $msg;
    exit(PKGSORT_FATAL_ERROR);
}

# Debugging output
sub
dprintf
{
    return if (! $debug);
    print "[debug:$progname] ";
    printf @_;
}
sub
dprint
{
    my @dbg;
    my ($f, $l, $s);

    return if (! $debug);
    @dbg = caller(1);
    ($f, $l, $s) = @dbg[1, 2, 3];
    $f =~ s/^.*\/([^\/]+)$/$1/;
    print "[$f/$l/$s()] ", @_;
}

# Print an error
sub
eprintf
{
    print "$progname:  Error:  ";
    printf @_;
}
sub
eprint
{
    print "$progname:  Error:  ", @_;
}

# Handle a terminate signal
sub
handle_signal
{
    my $sig = $_[0];

    eprint "Someone sent me a SIG$sig asking me to exit, so I shall.\n";
    close($GLOBAL_LOG) if ($GLOBAL_LOG);
    exit PKGSORT_TERMINATED;
}

# Handle a fatal signal
sub
handle_fatal_signal
{
    my $sig = $_[0];

    eprint "Caught fatal signal SIG$sig.  Cleaning up and aborting...\n";
    close($GLOBAL_LOG) if ($GLOBAL_LOG);
    exit PKGSORT_CRASHED;
}

# Handle a perl warning
sub
handle_warning
{
    dprint @_;
}

# Exclusive push.  Only push if the item(s) aren't already in the list
sub
xpush(\@; @)
{
    my $parray = shift;
    my @items = @_;

    foreach $item (@items) {
        push @{$parray}, $item if (!grep($_ eq $item, @{$parray}));
    }
}

sub
get_package_list
{
    my $filename = $_[0];
    my $line;
    my @pkgs;
    local *LISTFILE;

    open(LISTFILE, $filename) || return @pkgs;
    dprint "Reading package list from $filename\n";
    while (<LISTFILE>) {
        chomp($line = $_);
        # Skip comments and empty lines
        next if ($line =~ /^\#/ || $line =~ /^\s*$/);

        # These lines strip leading and trailing whitespace, then grab the contents of
        # the line before any intervening spaces but after any slashes.
        $line =~ s/^\s+//;
        $line =~ s/\s+$//;
        $line =~ s/^.*\///g;
#        if ($line =~ /^\S+\s+(-\S+.*)$/) {
#            $flags = $1;
#        }
        $line =~ s/^(\S+)\s+.*$/$1/;

        # Skip lines with colons (product variables from product files)
        next if ($line =~ /:/);

        # If we get here, what remains is a package
        push @pkgs, $line;
#        if ($flags) {
#            $flags{$line} = $flags;
#            dprint "Set flags for $line to $flags{$line}\n";
#        }
    }
    close(LISTFILE);
    dprint "Got package list:  ", join(" ", @pkgs), "\n";
    return @pkgs;
}

sub
get_srpm_for_rpm
{
    my $rpm = shift;
    my ($line, $cmd, $srpm);
    local *CMD;

    $cmd = "pkgtool -qs -p $path{$rpm}/$rpm";
    open(CMD, "$cmd 2>&1 |") || &fatal_error("Unable to execute pkgtool -- $!\n");
    while (<CMD>) {
        chomp($line = $_);
        if ($line =~ /^Source:  (.*)$/) {
            $srpm = $1;
            last;
        } else {
            eprint "$line\n";
        }
    }
    close(CMD);
    if ($? != PKGTOOL_SUCCESS) {
        &fatal_error("Query of $rpm failed (error $?).\n");
    }
    return $srpm;
}

sub
find_packages
{
    my @pkgs = @_;
    my (@contents, @rpms);
    my $i;
    local *DIR;

    foreach $dir (@pkgdirs) {
        my @tmp;

        opendir(DIR, "$dir") || return @rpms;
        @tmp = grep($_ =~ /(?<!src)\.rpm$/, readdir(DIR));
        closedir(DIR);
        push @contents, @tmp;
        foreach $tmp (@tmp) {
            $path{$tmp} = $dir;
        }
    }

    foreach $rpm (@contents) {
        my ($srpm, $spkg, $pkg, $ver, $rel);

        next if ($have_cache{"$path{$rpm}/$rpm"});
        $rpm =~ m/^([^\/]+)-([^-\/]+)-([^-\/]+)\.\w+\.rpm$/;
        $pkg = $1;
        $srpm = &get_srpm_for_rpm($rpm);
        $srpm =~ m/^([^\/]+)-([^-\/]+)-([^-\/]+)\.\w+\.rpm$/;
        ($spkg, $ver, $rel) = ($1, $2, $3);
        dprint "Package $pkg from $spkg $ver-$rel ($srpm)\n";
        if (scalar(@_)) {
            next if (!grep($_ eq $pkg || $_ eq $spkg, @pkgs));
        } else {
            push @pkgs, $pkg;
        }
        xpush @{$bin_packages{$spkg}}, $pkg;
        if (defined($src_version{$spkg})) {
            if ($src_version{$spkg} ne $ver || $src_release{$spkg} ne $rel) {
                eprint "Multiple versions of $spkg found:  $spkg-$ver-$rel (new) vs. $spkg-$src_version{$spkg}-$src_release{$spkg} (old)\n";
                if (-t) {
                    my $ans;

                    print "Shall I replace the old one with the new one?\n";
                    chomp($ans = <STDIN>);
                    if ($ans =~ /^\s*y(es)?\s*$/i) {
                        print "Using $rpm for $pkg\n";
                        undef @{$rpm_list{$pkg}};
                        push @{$rpm_list{$pkg}}, $rpm;
                    } else {
                        print "Ignoring $rpm\n";
                        next;
                    }
                } else {
                    print "I will ignore $rpm\n";
                    next;
                }
            }
        }
        $src_version{$pkg} = $ver;
        $src_release{$pkg} = $rel;
        $src_package{$pkg} = $spkg;
        $src_rpm{$spkg} = $srpm;
        xpush @{$rpm_list{$pkg}}, $rpm;
    }
    return @pkgs;
}

# Simplify package dependency queries and operations
sub
pkg_depends_on
{
    if (!defined($requires{$_[0]})) {
        return 0;
    } elsif ($_[1]) {
        # Check for exact matches first.
        if (grep($_ eq $_[1], @{$requires{$_[0]}})) {
            return 1;
        }
        # If they passed a non-zero 3rd parameter, only check exact matches
        if ($_[2] || !defined($provides{$_[1]})) {
            return 0;
        }
        # Next, check all of what $_[1] provides to see if $_[0] requires any of it
        foreach $prov (@{$provides{$_[1]}}) {
            if (grep($_ eq $prov, @{$requires{$_[0]}})) {
                return 1;
            }
        }
        # No matches, return false
        return 0;
    } else {
        return @{$requires{$_[0]}};
    }
}
sub
pkg_add_dep
{
    return if ($_[0] eq $_[1]);
    push @{$requires{$_[0]}}, $_[1] if (! &pkg_depends_on($_[0], $_[1], 1));
    xpush @{$what_requires{$_[1]}}, $_[0];
}
sub
pkg_provides
{
    if (!defined($provides{$_[0]})) {
        return 0;
    } elsif ($_[1]) {
        return scalar(grep($_ eq $_[1], @{$provides{$_[0]}}));
    } else {
        return @{$provides{$_[0]}};
    }
}
sub
pkg_add_cap
{
    push @{$provides{$_[0]}}, $_[1] if (! &pkg_provides($_[0], $_[1]));
    xpush @{$what_provides{$_[1]}}, $_[0];
}

sub
add_implicit_dependency
{
    my $old_dep = shift;
    my $new_dep = shift;
    my @pkgs = @_;
    my @tmp;

    # For each package in $_[2..] ...
    foreach $pkg (@pkgs) {
        # ... if it depends on $_[0], and it's not $_[1], and $_[1] doesn't depend on it...
        if (&pkg_depends_on($pkg, $old_dep) && ($pkg ne $new_dep) && ! &pkg_depends_on($new_dep, $pkg)) {
            # ... make it depend on $_[1] too.
            &pkg_add_dep($pkg, $new_dep);
        }
    }
}

sub
query_packages
{
    my @pkgs = @_;
    my ($line, $cmd, $rpm, $prog);
    local *CMD;

    print "Gathering dependency information....\n";
    foreach $pkg (@pkgs) {
        if (!defined($rpm_list{$pkg})) {
            eprint "No package found for $pkg!\n";
            next;
        }
        dprint "Package $pkg:  ", join(", ", @{$rpm_list{$pkg}}), "\n";
        @{$provides{$pkg}} = ($pkg);
        foreach $rpm (@{$rpm_list{$pkg}}) {
            $cmd = "pkgtool -qd -p $path{$rpm}/$rpm";

            next if ($have_cache{"$path{$rpm}/$rpm"});
            open(CMD, "$cmd 2>&1 |") || &fatal_error("Unable to execute pkgtool -- $!\n");
            if ($debug) {
                dprint "$cmd\n";
            } else {
                print "$pkg  ";
            }
            while (<CMD>) {
                chomp($line = $_);
                if ($line =~ /^Provides/ || $line =~ /^Contains/) {
                    $line =~ s/^\w+:  \s*(\S.+)\s*$/$1/;
                    $line =~ s/^\s+//;  $line =~ s/\s+$//;
                    next if ($pkg eq $line);
                    &pkg_add_cap($pkg, $line);
                } elsif ($line =~ /^Requires/) {
                    $line =~ s/^\w+:  \s*//;
                    $line =~ s/\s+[-=<>lteqng]+\s+\S+$//;
                    $line =~ s/^\s+//;  $line =~ s/\s+$//;
                    &pkg_add_dep($pkg, $line);
                } else {
                    eprint "$line\n";
                }
            }
            close(CMD);
            if ($? != PKGTOOL_SUCCESS) {
                &fatal_error("Query of $rpm failed (error $?).\n");
            }
        }
    }
    print "\nQuery complete.\n";

    # Go through the provides info and throw out any files/capabilities not required by other packages
    foreach $pkg (keys %provides) {
        dprint "Checking provides for $pkg\n";
        for ($i = 0; $i < scalar(@{$provides{$pkg}}); ) {
            my $file = $provides{$pkg}[$i];
            my $found = 0;

            if (scalar(@{$what_requires{$file}})) {
                dprint "Found package $what_requires{$file}[0] which requires $file\n";
                $found = 1;
                last;
            }
            if ($found) {
                $i++;  # Keep this one and go on to the next one.
            } else {
                # Nothing requires this.  Junk it.
                splice(@{$provides{$pkg}}, $i, 1);
                delete $what_provides{$file};
            }
        }
        if (!scalar(@{$provides{$pkg}})) {
            # Package contains no files/capabilities needed by other packages.
            delete $provides{$pkg};
        }
    }
}

sub
write_cache
{
    my @pkgs = @_;
    local *CACHE;

    open(CACHE, ">$ENV{HOME}/.pkgsort.cache") || return;
    foreach $pkg (@pkgs) {
        print CACHE "S:$pkg/$src_package{$pkg}/$src_rpm{$src_package{$pkg}}/$src_version{$pkg}/$src_release{$pkg}\n";
        foreach $rpm (@{$rpm_list{$pkg}}) {
            @s = stat("$path{$rpm}/$rpm");

            print CACHE "F:$pkg:$path{$rpm}/$rpm:$s[9]\n";
        }
        print "P:$pkg/", join("/", @{$provides{$pkg}}), "\n";
        print "R:$pkg/", join("/", @{$requires{$pkg}}), "\n";
    }
    close(CACHE);
}

sub
read_cache
{
    my ($line, $pkg, $skip, $dep);
    my (@inp, @fstat);
    local *CACHE;

    open(CACHE, "<$ENV{HOME}/.pkgsort.cache") || return;
    $skip = 0;
    while (<CACHE>) {
        chomp($line = $_);
        next if ($skip && $line !~ /^S/);
        if ($line =~ /^S:([^\/]+)\//) {
            $skip = 0;
            $pkg = $1;
            @inp = split("/", $line);
            dprint "Found cache data for $pkg\n";
            $src_package{$pkg} = $inp[1];
            $src_rpm{$inp[1]} = $inp[2];
            $src_version{$pkg} = $inp[3];
            $src_release{$pkg} = $inp[4];
            xpush @{$bin_packages{$inp[1]}}, $pkg;
        } elsif ($line =~ /^F:/) {
            @inp = split(":", $line);
            $pkg = $inp[1];
            if (!(@fstat = stat($inp[2])) || ($fstat[9] > $inp[3])) {
                dprint "Cache data for $inp[2] ($pkg) is outdated.\n";
                delete $src_version{$pkg};
                delete $src_release{$pkg};
                $skip = 1;
            } else {
                $have_cache{$inp[2]} = 1;
            }
            $inp[1] =~ m/^(.*)\/([^\/]+)$/;
            $rpm = $2;
            ($path{$2}, $rpm) = ($1, $2);
            xpush @{$rpm_list{$pkg}}, $rpm;
        } elsif ($line =~ /^P:([^\/]+)\//) {
            $pkg = $1;
            @inp = split("/", $line);
            shift @inp;
            dprint "Package $pkg provides:  ", join(", ", @inp), "\n";
            foreach $dep (@inp) {
                &pkg_add_cap($pkg, $dep);
            }
        } elsif ($line =~ /^R:([^\/]+)\//) {
            $pkg = $1;
            @inp = split("/", $line);
            shift @inp;
            dprint "Package $pkg requires:  ", join(", ", @inp), "\n";
            foreach $dep (@inp) {
                &pkg_add_dep($pkg, $dep);
            }
        }
    }
    close(CACHE);
}

sub
cmp_packages_by_dep_count
{
    my ($pkg1, $pkg2) = @_;
    my ($r1, $r2, $p1, $p2, $c1, $c2) = (0, 0, 0, 0, 0, 0);

    if (scalar(@_) != 2) {
        # If we were called by the sort() function, use $a and $b
        ($pkg1, $pkg2) = ($a, $b);
    }
    dprint "Comparing $pkg1 and $pkg2\n";
    $r1 = scalar(@{$requires{$pkg1}}) if (defined($requires{$pkg1}));
    $r2 = scalar(@{$requires{$pkg2}}) if (defined($requires{$pkg2}));
    $p1 = scalar(@{$provides{$pkg1}}) if (defined($provides{$pkg1}));
    $p2 = scalar(@{$provides{$pkg2}}) if (defined($provides{$pkg2}));

    # First compare by the number of dependencies.  If they're equal, compare by
    # the number of things provided.  If they're still equal, compare by the number
    # of files provided.
    if ($r1 != $r2) {
        # Whoever has less dependencies is less in the sort order
        return ($r1 <=> $r2);
    } elsif ($p1 != $p2) {
        # Whoever provides more is less in the sort order
        return ($p2 <=> $p1);  # Notice these are reversed
    } elsif ($c1 != $c2) {
        return ($c2 <=> $c1);  # These too
    }
    return ($pkg1 cmp $pkg2);
}

sub
cmp_packages_by_relation
{
    my ($pkg1, $pkg2) = @_;
    my (@requires, @provides, @tmp);
    my ($dep1, $dep2);

    $dep1 = &pkg_depends_on($pkg1, $pkg2);
    $dep2 = &pkg_depends_on($pkg2, $pkg1);

    dprint "Comparing $pkg1 and $pkg2:  dep1 $dep1, dep2 $dep2\n";
    if (! $dep1) {
        # Package 1 does not depend on package 2
        return ($dep2 ? -1 : 0);
    } else {
        # Package 1 depends on package 2
        if (! $dep2) {
            # Package 2 doesn't depend on package 1, so package 1 > package 2
            return 1;
        } else {
            my $n = $pkg1 cmp $pkg2;
            my $s;
            my ($lib_cnt1, $lib_cnt2);

            # Doh!  We have a circular dependency.  Note it, then sort alphabetically.
            dprint "Circular dependency detected between $pkg1 and $pkg2.\n";
            if ($n <= 0) {
                $s = "$pkg1/$pkg2";
            } else {
                $s = "$pkg2/$pkg1";
            }
            xpush @circular_deps, $s;

            # Now here's the hard part.  What to do about circular dependencies.  First,
            # let's see if one supplies libs and the other doesn't or supplies less.
            # If so, more libs should come first.
            $lib_cnt1 = grep($_ =~ /^lib/, @{$provides{$pkg1}});
            $lib_cnt2 = grep($_ =~ /^lib/, @{$provides{$pkg2}});
            if ($lib_cnt1 != $lib_cnt2) {
                return ($lib_cnt2 <=> $lib_cnt1);
            }

            # Doh!  They both provide the same number of libs, probably none.  What next?
            return &cmp_packages_by_dep_count($pkg1, $pkg2);
        }
    }
    return 0;
}

sub
sort_packages
{
    my @pkgs = @_;
    my $cnt = scalar(@pkgs);
    my ($changes, $func_start, $loop_start, $loop_end, $func_end, $n);
    local *OUTFILE;

    $func_start = (times)[0];
    $n = 0;
    return if ($cnt == 1);

    # Work around RedHat's incomplete dependency info by
    # making kernel-headers and procps depend on fileutils
    &add_implicit_dependency("/bin/sh", "fileutils", "kernel-headers", "procps");

    # First sort packages by the number of dependencies they have/fulfill
    if ($sort_method eq "p" || $sort_method eq "d") {
        @pkgs = sort cmp_packages_by_dep_count @pkgs;

        # Then brute-force check and fix the list until no changes are made
        if ($sort_method eq "d") {
            do {
                $loop_start = (times)[0];
                ($changes, @pkgs) = &verify_list(@pkgs);
                $loop_end = (times)[0];
                $n++;
                dprint "Verify pass #$n took ", $loop_end - $loop_start, " seconds.\n";
                } while ($changes);
        }
    } elsif ($sort_method eq "a") {
        @pkgs = sort {$src_package{$a} cmp $src_package{$b}} @pkgs;
    } else {
        @pkgs = sort {$a cmp $b} @pkgs;
    }
    if ($reverse_sort) {
        @pkgs = reverse @pkgs;
    }

    $func_end = (times)[0];
    dprint "Complete sort operation took ", $func_end - $func_start, " seconds and $n passes.\n";

    return @pkgs;
}

sub
verify_list
{
    my @pkgs = @_;
    my ($i, $j, $changes);

    for ($i = 0, $changes = 0; $i <= $#pkgs; $i++) {
        for ($j = $i + 1; $j <= $#pkgs; $j++) {
            if (&cmp_packages_by_relation($pkgs[$i], $pkgs[$j]) > 0) {
                my $tmp;

                dprint "Dependency order error:  $pkgs[$i] ($i) depends on $pkgs[$j] ($j)\n";
                if (defined($dep_error{"$pkgs[$i]/$pkgs[$j]"})) {
                    eprint "Multi-level circular dependency detected.  Crap.\n";
                    return (0, @pkgs);
                }
                $dep_error{"$pkgs[$i]/$pkgs[$j]"} = 1;
                $changes++;
                $tmp = splice(@pkgs, $j, 1);
                splice(@pkgs, $i, 0, $tmp);
                dprint "Moved $tmp to position $i.  New order is $pkgs[$i], $pkgs[$i+1]\n";
            }
        }
    }
    return ($changes, @pkgs);
}

sub
sort_source_packages
{
    my @pkgs = @_;
    my @src_pkgs;

    foreach $pkg (@pkgs) {
        xpush @src_pkgs, $src_package{$pkg};
    }
    return @src_pkgs;
}

sub
show_packages
{
    my @pkgs = @_;
    my @src_pkgs;

    if (($outfile eq "-") || !open(OUTFILE, ">$outfile")) {
        open(OUTFILE, ">&STDOUT");
    }

    if (substr($output_format, 0, 4) eq "prod") {
        @src_pkgs = &sort_source_packages(@pkgs);
        if ($output_format eq "prodfile") {
            foreach $spkg (@src_pkgs) {
                print OUTFILE "# $spkg\n";
                print OUTFILE "contrib-rh/$src_rpm{$spkg}\n";
                foreach $pkg (@{$bin_packages{$spkg}}) {
                    foreach $rpm (sort @{$rpm_list{$pkg}}) {
                        print OUTFILE "bin-rh/$rpm\n";
                    }
                }
                print OUTFILE "\n";
            }
        }
    } else {
        foreach $pkg (@pkgs) {
            my $flag = "";

            if (grep($_ =~ /^\Q$pkg\E\// || $_ =~ /\/\Q$pkg\E$/, @circular_deps)) {
                $flag .= " --nodeps";
            }
            if ($output_format eq "names") {
                print OUTFILE "$pkg$flag\n";
            } elsif ($output_format eq "files") {
                foreach $rpm (sort @{$rpm_list{$pkg}}) {
                    print OUTFILE "$rpm$flag\n";
                }
            }
        }
    }
    close(OUTFILE);
}

# main() here is basically the same as main() in C
sub
main
{
    # Set up the basic variables
    $progname = "pkgsort";
    $version = "1.0";

    # See the Getopt::Long man page for details on the syntax of this line
    @valid_opts = ("h|help", "v|version", "d|debug", "D|dir=s", "l|list=s",
                   "o|outfile=s", "f|format=s", "s|sort=s");
    Getopt::Long::Configure("no_getopt_compat", "bundling", "no_ignore_case");
    Getopt::Long::GetOptions(@valid_opts);

    # Post-parse the options stuff
    select STDOUT; $| = 1;
    if ($opt_v) {
        # Do not edit this variable.  It is updated automatically by CVS when you commit
        my $rcs_info = 'CVS Revision $Revision: 1.6 $ created on $Date: 2000/09/20 18:47:28 $ by $Author: mej $ ';

        $rcs_info =~ s/\$\s*Revision: (\S+) \$/$1/;
        $rcs_info =~ s/\$\s*Date: (\S+) (\S+) \$/$1 at $2/;
        $rcs_info =~ s/\$\s*Author: (\S+) \$ /$1/;
        print "\n";
	print "$progname $version by Michael Jennings <mej\@eterm.org>\n";
        print "Copyright (c) 2000, Michael Jennings and VA Linux Systems, Inc.\n";
        print "  ($rcs_info)\n";
        print "\n";
	return PKGSORT_SUCCESS;
    } elsif ($opt_h) {
	&print_usage_info();   # Never returns
        # This is a really silly way to shut up the "used only once" warnings.
        $opt_h = $opt_v = $opt_d;
    }

    $debug = $opt_d;
    $outfile = ($opt_o ? $opt_o : "-");
    if ($opt_f) {
        if ($opt_f eq substr("names", 0, length($opt_f))) {
            $output_format = "names";
        } elsif ($opt_f eq substr("files", 0, length($opt_f))) {
            $output_format = "files";
        } elsif ($opt_f eq substr("prodfile", 0, length($opt_f))) {
            $output_format = "prodfile";
        } elsif ($opt_f eq substr("products", 0, length($opt_f))) {
            $output_format = "products";
        } else {
            eprint "Unrecognized output format:  $opt_f\n";
            eprint "Valid formats:  names, files, prodfile\n";
            $output_format = "files";
        }
    } else {
        $opt_f = "files";
    }
    $sort_method = ($opt_s ? $opt_s : "d");
    if ($sort_method =~ /r/) {
        $reverse_sort = 1;
        $sort_method =~ s/r//;
    } else {
        $reverse_sort = 0;
    }
    if ($sort_method !~ /^[adps]$/i) {
        eprint "Invalid sort flags:  $sort_method\n";
        eprint "Must be exactly one of a, d, p, or s, with an optional r\n";
        $sort_method = "d";
    }
    if ($opt_D) {
        @pkgdirs = split(/[:\s]/, $opt_D);
    } else {
        @pkgdirs = glob('$ENV{BUILD_DIR}/RPMS/???*');
    }
    if ($opt_l) {
        @pkgs = &get_package_list($opt_l);
    } else {
        if (scalar(@ARGV)) {
            @pkgs = @ARGV;
        } else {
            @pkgs = ();
        }
    }

    # Signal handling
    $SIG{HUP} = 'IGNORE';
    $SIG{INT} = \&handle_signal;
    $SIG{TERM} = \&handle_signal;
    $SIG{QUIT} = \&handle_fatal_signal;
    $SIG{ILL} = \&handle_fatal_signal;
    $SIG{ABRT} = \&handle_fatal_signal;
    $SIG{FPE} = \&handle_fatal_signal;
    $SIG{SEGV} = \&handle_fatal_signal;
    $SIG{BUS} = \&handle_fatal_signal;
    $SIG{TSTP} = \&handle_fatal_signal;
    $SIG{TTIN} = \&handle_fatal_signal;
    $SIG{TTOU} = \&handle_fatal_signal;
    $SIG{__WARN__} = \&handle_warning;

    &read_cache();
    @pkgs = &find_packages(@pkgs);
    if ($sort_method eq "p" || $sort_method eq "d") {
        &query_packages(@pkgs);
    }
    @pkgs = &sort_packages(@pkgs);
    &write_cache(@pkgs);
    &show_packages(@pkgs);
    return PKGSORT_SUCCESS;
}

exit &main();
